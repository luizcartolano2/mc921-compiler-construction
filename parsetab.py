
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGELTLEleftPLUSMINUSPLUSPLUSMINUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIVIDE DIVIDEEQUAL ELSE EQ EQUALS FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSEQUAL MINUSMINUS MOD MODEQUAL NE NOT OR PLUS PLUSEQUAL PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING_LITERAL TIMES TIMESEQUAL VOID WHILE\n            program : global_declaration_list\n        \n            global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        \n            global_declaration : declaration\n        \n            global_declaration : function_definition\n        \n            function_definition : declarator declaration_list_opt compound_statement\n        \n            function_definition : type_specifier declarator declaration_list_opt compound_statement\n        \n            statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n        \n            declaration_body :  type_specifier init_declarator_list_opt\n        \n            declaration :  declaration_body SEMI\n        \n            declaration_list : declaration\n                             | declaration_list declaration\n        \n            type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n        \n            init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n        \n            init_declarator : declarator\n                            | declarator EQUALS initializer\n        \n            declarator : direct_declarator\n        \n            declarator : pointer direct_declarator\n        \n            declaration_list_opt : empty\n                                 | declaration_list\n        \n            pointer : TIMES\n                    | TIMES pointer\n        \n            direct_declarator : identifier\n        \n            direct_declarator : LPAREN declarator RPAREN\n        \n            direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET\n        \n            direct_declarator : direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier_list_opt RPAREN\n        \n            identifier : ID\n        \n            identifier_list : identifier\n                            | identifier_list COMMA identifier\n        \n            identifier_list_opt : empty\n                                | identifier_list\n        \n            constant_expression : binary_expression\n        \n            constant_expression_opt : empty\n                                    | constant_expression\n        \n            binary_expression : cast_expression\n                              | binary_expression  TIMES   binary_expression\n                              | binary_expression  DIVIDE  binary_expression\n                              | binary_expression  MOD     binary_expression\n                              | binary_expression  PLUS    binary_expression\n                              | binary_expression  MINUS   binary_expression\n                              | binary_expression  LT      binary_expression\n                              | binary_expression  LE      binary_expression\n                              | binary_expression  GT      binary_expression\n                              | binary_expression  GE      binary_expression\n                              | binary_expression  EQ      binary_expression\n                              | binary_expression  NE      binary_expression\n                              | binary_expression  AND     binary_expression\n                              | binary_expression  OR      binary_expression\n        \n            cast_expression : unary_expression\n        \n            cast_expression : LPAREN type_specifier RPAREN cast_expression\n        \n            unary_expression : postfix_expression\n        \n            unary_expression : PLUSPLUS unary_expression\n                             | MINUSMINUS unary_expression\n                             | unary_operator cast_expression\n        \n            postfix_expression : primary_expression\n        \n            postfix_expression : postfix_expression LBRACKET expression RBRACKET\n        \n            postfix_expression : postfix_expression LPAREN argument_expression_opt RPAREN\n        \n            postfix_expression : postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n        \n            argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n        \n            argument_expression_opt : empty\n                                    | argument_expression\n        \n            primary_expression : identifier\n        \n            primary_expression : constant\n        \n            primary_expression : CHAR_CONST\n        \n            primary_expression : LPAREN expression RPAREN\n        \n            constant : INT_CONST\n        \n            constant : STRING_LITERAL\n        \n            constant : FLOAT_CONST\n        \n            expression : assignment_expression\n                       | expression COMMA assignment_expression\n        \n            expression_opt : empty\n                           | expression\n        \n            assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n        \n            assignment_operator : EQUALS\n                                | TIMESEQUAL\n                                | DIVIDEEQUAL\n                                | MODEQUAL\n                                | PLUSEQUAL\n                                | MINUSEQUAL\n        \n            unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n        \n            parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n        \n            parameter_declaration : type_specifier declarator\n        \n            init_declarator_list_opt : empty\n                                     | init_declarator_list\n        \n            initializer : assignment_expression\n        \n            initializer : LBRACE initializer_list_opt RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n        \n            initializer_list_opt : empty\n                                 | initializer_list\n        \n            initializer_list : initializer\n                             | initializer_list COMMA initializer\n        \n            block_item : declaration\n                       | statement\n        \n            block_item_list : block_item\n                            | block_item_list block_item\n        \n            block_item_list_opt : empty\n                                | block_item_list\n        \n            compound_statement : LBRACE block_item_list_opt RBRACE\n        \n            expression_statement : expression_opt SEMI\n        \n            selection_statement : IF LPAREN expression RPAREN statement\n        \n            selection_statement : IF LPAREN expression RPAREN statement ELSE statement\n        \n            iteration_statement : WHILE LPAREN expression RPAREN statement\n        \n            iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n\n        \n            iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        \n            jump_statement : BREAK SEMI\n        \n            jump_statement : RETURN expression SEMI\n                           | RETURN SEMI\n        \n            assert_statement : ASSERT expression SEMI\n        \n            print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n        \n            read_statement : READ LPAREN argument_expression RPAREN SEMI\n        \n            empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,7,9,15,18,19,20,23,24,26,32,33,36,37,38,52,73,76,77,78,79,80,81,82,83,84,85,86,87,101,106,130,131,132,135,136,138,142,143,145,187,188,207,208,211,212,216,220,221,],[11,11,-2,-4,-5,11,-28,-34,-39,-3,-17,11,-18,11,11,-29,-6,11,-19,11,-35,11,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-7,-36,-37,11,-38,-118,-115,-119,11,-125,-127,-126,-128,-120,-122,-129,-130,-121,-124,-123,]),'CHAR':([0,2,3,4,5,7,9,15,18,19,20,23,24,26,32,33,36,37,38,52,73,76,77,78,79,80,81,82,83,84,85,86,87,101,106,130,131,132,135,136,138,142,143,145,187,188,207,208,211,212,216,220,221,],[12,12,-2,-4,-5,12,-28,-34,-39,-3,-17,12,-18,12,12,-29,-6,12,-19,12,-35,12,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-7,-36,-37,12,-38,-118,-115,-119,12,-125,-127,-126,-128,-120,-122,-129,-130,-121,-124,-123,]),'INT':([0,2,3,4,5,7,9,15,18,19,20,23,24,26,32,33,36,37,38,52,73,76,77,78,79,80,81,82,83,84,85,86,87,101,106,130,131,132,135,136,138,142,143,145,187,188,207,208,211,212,216,220,221,],[13,13,-2,-4,-5,13,-28,-34,-39,-3,-17,13,-18,13,13,-29,-6,13,-19,13,-35,13,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-7,-36,-37,13,-38,-118,-115,-119,13,-125,-127,-126,-128,-120,-122,-129,-130,-121,-124,-123,]),'FLOAT':([0,2,3,4,5,7,9,15,18,19,20,23,24,26,32,33,36,37,38,52,73,76,77,78,79,80,81,82,83,84,85,86,87,101,106,130,131,132,135,136,138,142,143,145,187,188,207,208,211,212,216,220,221,],[14,14,-2,-4,-5,14,-28,-34,-39,-3,-17,14,-18,14,14,-29,-6,14,-19,14,-35,14,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-7,-36,-37,14,-38,-118,-115,-119,14,-125,-127,-126,-128,-120,-122,-129,-130,-121,-124,-123,]),'LPAREN':([0,2,3,4,5,8,9,10,11,12,13,14,15,16,17,18,19,20,25,31,33,35,36,37,41,42,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,73,76,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,96,97,101,104,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,127,130,132,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,174,186,187,188,193,195,196,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[16,16,-2,-4,-5,16,32,16,-20,-21,-22,-23,-34,16,-32,-39,-3,-17,16,52,32,-33,-6,52,52,16,-96,-97,-98,52,123,127,127,52,-67,-95,-99,-76,-77,-78,-80,-81,-82,16,-35,52,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,139,141,142,52,52,147,148,-7,52,-36,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-70,-71,52,-37,-38,-118,-115,-119,52,52,52,52,-125,-127,52,52,52,-89,-90,-91,-92,-93,-94,52,-79,52,-126,-128,52,-68,-69,52,52,52,52,-120,-122,52,-129,-130,52,52,-121,52,52,-124,-123,]),'TIMES':([0,2,3,4,5,8,11,12,13,14,16,17,18,19,20,25,31,36,37,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,71,76,77,78,79,80,81,82,83,84,85,86,87,94,95,99,100,101,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,186,187,188,193,194,195,196,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[17,17,-2,-4,-5,17,-20,-21,-22,-23,17,17,-39,-3,-17,17,48,-6,48,48,17,107,-47,-96,-97,-98,-61,48,-63,48,48,48,-67,-95,-99,-76,-77,-78,-80,-81,-82,17,48,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,48,48,107,-61,-7,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-70,-71,-64,48,-65,-66,-118,-115,-119,48,48,48,48,-125,-127,48,48,48,-89,-90,-91,-92,-93,-94,-48,-49,-50,107,107,107,107,107,107,107,107,107,107,48,-79,48,-126,-128,48,-62,-68,-69,48,48,48,48,-120,-122,48,-129,-130,48,48,-121,48,48,-124,-123,]),'ID':([0,2,3,4,5,8,10,11,12,13,14,16,17,19,20,25,31,32,35,36,37,41,42,48,49,50,52,54,55,56,58,59,71,76,77,78,79,80,81,82,83,84,85,86,87,94,95,101,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,133,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,186,187,188,193,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[18,18,-2,-4,-5,18,18,-20,-21,-22,-23,18,-32,-3,-17,18,18,18,-33,-6,18,18,18,-96,-97,-98,18,18,18,18,-95,-99,18,18,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,18,18,-7,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-118,-115,-119,18,18,18,18,-125,-127,18,18,18,-89,-90,-91,-92,-93,-94,18,18,-126,-128,18,18,18,18,18,-120,-122,18,-129,-130,18,18,-121,18,18,-124,-123,]),'$end':([1,2,3,4,5,19,20,36,101,135,],[0,-1,-2,-4,-5,-3,-17,-6,-7,-118,]),'SEMI':([6,8,9,11,12,13,14,15,18,20,25,26,27,28,29,30,33,37,39,47,51,53,57,60,61,62,63,64,65,73,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,93,94,98,99,100,102,103,105,106,124,125,126,128,129,130,132,135,136,137,138,142,143,144,145,146,160,161,162,163,164,165,166,167,168,169,170,171,172,174,183,185,186,187,188,191,192,194,195,196,198,199,200,201,202,203,204,207,208,209,211,212,213,216,218,219,220,221,],[20,-131,-28,-20,-21,-22,-23,-34,-39,-17,-131,-26,-16,-103,-104,-24,-29,-131,-26,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,-35,-85,-131,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,138,-86,143,145,-83,-87,-61,-27,-105,-25,-36,-70,-71,-64,-65,-66,-37,-38,-118,-115,-85,-119,-131,-125,187,-127,188,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-79,-84,200,-131,-126,-128,-88,-106,-62,-68,-69,-131,-131,-131,210,211,212,-107,-120,-122,214,-129,-130,-131,-121,-131,-131,-124,-123,]),'LBRACE':([7,9,15,18,20,21,22,23,24,26,33,37,38,40,41,73,76,77,78,79,80,81,82,83,84,85,86,87,104,106,130,132,135,136,138,143,145,187,188,193,198,199,207,208,211,212,213,216,218,219,220,221,],[-131,-28,-34,-39,-17,37,-30,-31,-18,-131,-29,37,-19,37,104,-35,37,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,104,-36,-37,-38,-118,-115,-119,-125,-127,-126,-128,104,37,37,-120,-122,-129,-130,37,-121,37,37,-124,-123,]),'EQUALS':([9,15,18,26,33,39,51,53,57,60,61,62,63,64,65,73,100,106,124,125,126,128,129,130,132,174,194,195,196,],[-28,-34,-39,41,-29,41,-61,-63,-67,-76,-77,-78,-80,-81,-82,-35,150,-36,-70,-71,-64,-65,-66,-37,-38,-79,-62,-68,-69,]),'COMMA':([9,15,18,26,29,30,33,39,47,51,53,57,60,61,62,63,64,65,66,68,70,72,73,90,98,99,100,102,103,105,106,121,124,125,126,128,129,130,132,134,144,146,157,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,178,179,180,181,182,183,184,190,191,192,194,195,196,204,205,206,],[-28,-34,-39,-26,42,-24,-29,-26,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,131,-100,133,-40,-35,140,-83,-87,-61,-27,-105,-25,-36,140,-70,-71,-64,-65,-66,-37,-38,-102,140,140,193,-110,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-79,140,197,-72,-101,-41,140,-84,140,197,-88,-106,-62,-68,-69,-107,-111,-73,]),'RPAREN':([9,11,12,13,14,15,18,32,33,34,47,51,53,57,60,61,62,63,64,65,66,67,68,69,70,72,73,90,98,99,100,106,120,121,123,124,125,126,128,129,130,132,134,137,147,160,161,162,163,164,165,166,167,168,169,170,171,172,174,176,177,178,179,180,181,182,183,184,189,190,191,194,195,196,206,210,214,215,217,],[-28,-20,-21,-22,-23,-34,-39,-131,-29,73,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,130,132,-100,-42,-43,-40,-35,-86,-83,-87,-61,-36,173,174,-131,-70,-71,-64,-65,-66,-37,-38,-102,-85,-131,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-79,196,-74,-75,-72,-101,-41,198,-84,199,202,203,-88,-62,-68,-69,-73,-131,-131,218,219,]),'LBRACKET':([9,15,18,33,53,57,60,61,62,63,64,65,73,106,124,125,130,132,174,195,196,],[31,-34,-39,31,122,-67,-76,-77,-78,-80,-81,-82,-35,-36,-70,-71,-37,-38,-79,-68,-69,]),'PLUSPLUS':([18,20,31,37,41,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,76,77,78,79,80,81,82,83,84,85,86,87,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,127,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,174,186,187,188,193,195,196,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-39,-17,54,54,54,-96,-97,-98,54,124,54,54,54,-67,-95,-99,-76,-77,-78,-80,-81,-82,54,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-70,-71,54,-118,-115,-119,54,54,54,54,-125,-127,54,54,54,-89,-90,-91,-92,-93,-94,54,-79,54,-126,-128,54,-68,-69,54,54,54,54,-120,-122,54,-129,-130,54,54,-121,54,54,-124,-123,]),'MINUSMINUS':([18,20,31,37,41,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,76,77,78,79,80,81,82,83,84,85,86,87,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,127,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,174,186,187,188,193,195,196,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-39,-17,55,55,55,-96,-97,-98,55,125,55,55,55,-67,-95,-99,-76,-77,-78,-80,-81,-82,55,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-70,-71,55,-118,-115,-119,55,55,55,55,-125,-127,55,55,55,-89,-90,-91,-92,-93,-94,55,-79,55,-126,-128,55,-68,-69,55,55,55,55,-120,-122,55,-129,-130,55,55,-121,55,55,-124,-123,]),'DIVIDE':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,108,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,108,-61,-70,-71,-64,-65,-66,-48,-49,-50,108,108,108,108,108,108,108,108,108,108,-79,-62,-68,-69,]),'MOD':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,109,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,109,-61,-70,-71,-64,-65,-66,-48,-49,-50,109,109,109,109,109,109,109,109,109,109,-79,-62,-68,-69,]),'PLUS':([18,20,31,37,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,76,77,78,79,80,81,82,83,84,85,86,87,94,95,99,100,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,186,187,188,193,194,195,196,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-39,-17,49,49,49,110,-47,-96,-97,-98,-61,49,-63,49,49,49,-67,-95,-99,-76,-77,-78,-80,-81,-82,49,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,49,49,110,-61,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-70,-71,-64,49,-65,-66,-118,-115,-119,49,49,49,49,-125,-127,49,49,49,-89,-90,-91,-92,-93,-94,-48,-49,-50,-51,-52,110,110,110,110,110,110,110,110,49,-79,49,-126,-128,49,-62,-68,-69,49,49,49,49,-120,-122,49,-129,-130,49,49,-121,49,49,-124,-123,]),'MINUS':([18,20,31,37,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,76,77,78,79,80,81,82,83,84,85,86,87,94,95,99,100,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,186,187,188,193,194,195,196,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-39,-17,50,50,50,111,-47,-96,-97,-98,-61,50,-63,50,50,50,-67,-95,-99,-76,-77,-78,-80,-81,-82,50,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,50,50,111,-61,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-70,-71,-64,50,-65,-66,-118,-115,-119,50,50,50,50,-125,-127,50,50,50,-89,-90,-91,-92,-93,-94,-48,-49,-50,-51,-52,111,111,111,111,111,111,111,111,50,-79,50,-126,-128,50,-62,-68,-69,50,50,50,50,-120,-122,50,-129,-130,50,50,-121,50,50,-124,-123,]),'LT':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,112,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,112,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,112,112,112,112,-79,-62,-68,-69,]),'LE':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,113,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,113,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,113,113,113,113,-79,-62,-68,-69,]),'GT':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,114,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,114,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,114,114,114,114,-79,-62,-68,-69,]),'GE':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,115,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,115,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,115,115,115,115,-79,-62,-68,-69,]),'EQ':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,116,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,116,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,116,116,-79,-62,-68,-69,]),'NE':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,117,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,117,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,117,117,-79,-62,-68,-69,]),'AND':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,118,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,118,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,118,-79,-62,-68,-69,]),'OR':([18,46,47,51,53,57,60,61,62,63,64,65,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,194,195,196,],[-39,119,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,119,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-79,-62,-68,-69,]),'RBRACKET':([18,31,43,44,45,46,47,51,53,57,60,61,62,63,64,65,98,99,100,124,125,126,128,129,160,161,162,163,164,165,166,167,168,169,170,171,172,174,175,183,191,194,195,196,],[-39,-131,106,-45,-46,-44,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,-83,-87,-61,-70,-71,-64,-65,-66,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-79,195,-84,-88,-62,-68,-69,]),'TIMESEQUAL':([18,51,53,57,60,61,62,63,64,65,100,124,125,126,128,129,174,194,195,196,],[-39,-61,-63,-67,-76,-77,-78,-80,-81,-82,151,-70,-71,-64,-65,-66,-79,-62,-68,-69,]),'DIVIDEEQUAL':([18,51,53,57,60,61,62,63,64,65,100,124,125,126,128,129,174,194,195,196,],[-39,-61,-63,-67,-76,-77,-78,-80,-81,-82,152,-70,-71,-64,-65,-66,-79,-62,-68,-69,]),'MODEQUAL':([18,51,53,57,60,61,62,63,64,65,100,124,125,126,128,129,174,194,195,196,],[-39,-61,-63,-67,-76,-77,-78,-80,-81,-82,153,-70,-71,-64,-65,-66,-79,-62,-68,-69,]),'PLUSEQUAL':([18,51,53,57,60,61,62,63,64,65,100,124,125,126,128,129,174,194,195,196,],[-39,-61,-63,-67,-76,-77,-78,-80,-81,-82,154,-70,-71,-64,-65,-66,-79,-62,-68,-69,]),'MINUSEQUAL':([18,51,53,57,60,61,62,63,64,65,100,124,125,126,128,129,174,194,195,196,],[-39,-61,-63,-67,-76,-77,-78,-80,-81,-82,155,-70,-71,-64,-65,-66,-79,-62,-68,-69,]),'RBRACE':([18,20,37,47,51,53,57,60,61,62,63,64,65,74,75,76,77,78,79,80,81,82,83,84,85,86,87,99,100,103,104,124,125,126,128,129,135,136,138,143,145,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,174,187,188,191,192,193,194,195,196,204,205,207,208,211,212,216,220,221,],[-39,-17,-131,-47,-61,-63,-67,-76,-77,-78,-80,-81,-82,135,-116,-117,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-87,-61,-105,-131,-70,-71,-64,-65,-66,-118,-115,-119,-125,-127,192,-109,-108,-110,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-79,-126,-128,-88,-106,204,-62,-68,-69,-107,-111,-120,-122,-129,-130,-121,-124,-123,]),'IF':([20,37,76,77,78,79,80,81,82,83,84,85,86,87,135,136,138,143,145,187,188,198,199,207,208,211,212,213,216,218,219,220,221,],[-17,89,89,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-118,-115,-119,-125,-127,-126,-128,89,89,-120,-122,-129,-130,89,-121,89,89,-124,-123,]),'WHILE':([20,37,76,77,78,79,80,81,82,83,84,85,86,87,135,136,138,143,145,187,188,198,199,207,208,211,212,213,216,218,219,220,221,],[-17,91,91,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-118,-115,-119,-125,-127,-126,-128,91,91,-120,-122,-129,-130,91,-121,91,91,-124,-123,]),'FOR':([20,37,76,77,78,79,80,81,82,83,84,85,86,87,135,136,138,143,145,187,188,198,199,207,208,211,212,213,216,218,219,220,221,],[-17,92,92,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-118,-115,-119,-125,-127,-126,-128,92,92,-120,-122,-129,-130,92,-121,92,92,-124,-123,]),'BREAK':([20,37,76,77,78,79,80,81,82,83,84,85,86,87,135,136,138,143,145,187,188,198,199,207,208,211,212,213,216,218,219,220,221,],[-17,93,93,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-118,-115,-119,-125,-127,-126,-128,93,93,-120,-122,-129,-130,93,-121,93,93,-124,-123,]),'RETURN':([20,37,76,77,78,79,80,81,82,83,84,85,86,87,135,136,138,143,145,187,188,198,199,207,208,211,212,213,216,218,219,220,221,],[-17,94,94,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-118,-115,-119,-125,-127,-126,-128,94,94,-120,-122,-129,-130,94,-121,94,94,-124,-123,]),'ASSERT':([20,37,76,77,78,79,80,81,82,83,84,85,86,87,135,136,138,143,145,187,188,198,199,207,208,211,212,213,216,218,219,220,221,],[-17,95,95,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-118,-115,-119,-125,-127,-126,-128,95,95,-120,-122,-129,-130,95,-121,95,95,-124,-123,]),'PRINT':([20,37,76,77,78,79,80,81,82,83,84,85,86,87,135,136,138,143,145,187,188,198,199,207,208,211,212,213,216,218,219,220,221,],[-17,96,96,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-118,-115,-119,-125,-127,-126,-128,96,96,-120,-122,-129,-130,96,-121,96,96,-124,-123,]),'READ':([20,37,76,77,78,79,80,81,82,83,84,85,86,87,135,136,138,143,145,187,188,198,199,207,208,211,212,213,216,218,219,220,221,],[-17,97,97,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,-118,-115,-119,-125,-127,-126,-128,97,97,-120,-122,-129,-130,97,-121,97,97,-124,-123,]),'ADDRESS':([20,31,37,41,48,49,50,52,54,55,56,58,59,76,77,78,79,80,81,82,83,84,85,86,87,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,186,187,188,193,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-17,58,58,58,-96,-97,-98,58,58,58,58,-95,-99,58,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-118,-115,-119,58,58,58,58,-125,-127,58,58,58,-89,-90,-91,-92,-93,-94,58,58,-126,-128,58,58,58,58,58,-120,-122,58,-129,-130,58,58,-121,58,58,-124,-123,]),'NOT':([20,31,37,41,48,49,50,52,54,55,56,58,59,76,77,78,79,80,81,82,83,84,85,86,87,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,186,187,188,193,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-17,59,59,59,-96,-97,-98,59,59,59,59,-95,-99,59,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-118,-115,-119,59,59,59,59,-125,-127,59,59,59,-89,-90,-91,-92,-93,-94,59,59,-126,-128,59,59,59,59,59,-120,-122,59,-129,-130,59,59,-121,59,59,-124,-123,]),'CHAR_CONST':([20,31,37,41,48,49,50,52,54,55,56,58,59,76,77,78,79,80,81,82,83,84,85,86,87,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,186,187,188,193,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-17,62,62,62,-96,-97,-98,62,62,62,62,-95,-99,62,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-118,-115,-119,62,62,62,62,-125,-127,62,62,62,-89,-90,-91,-92,-93,-94,62,62,-126,-128,62,62,62,62,62,-120,-122,62,-129,-130,62,62,-121,62,62,-124,-123,]),'INT_CONST':([20,31,37,41,48,49,50,52,54,55,56,58,59,76,77,78,79,80,81,82,83,84,85,86,87,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,186,187,188,193,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-17,63,63,63,-96,-97,-98,63,63,63,63,-95,-99,63,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-118,-115,-119,63,63,63,63,-125,-127,63,63,63,-89,-90,-91,-92,-93,-94,63,63,-126,-128,63,63,63,63,63,-120,-122,63,-129,-130,63,63,-121,63,63,-124,-123,]),'STRING_LITERAL':([20,31,37,41,48,49,50,52,54,55,56,58,59,76,77,78,79,80,81,82,83,84,85,86,87,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,186,187,188,193,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-17,64,64,64,-96,-97,-98,64,64,64,64,-95,-99,64,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-118,-115,-119,64,64,64,64,-125,-127,64,64,64,-89,-90,-91,-92,-93,-94,64,64,-126,-128,64,64,64,64,64,-120,-122,64,-129,-130,64,64,-121,64,64,-124,-123,]),'FLOAT_CONST':([20,31,37,41,48,49,50,52,54,55,56,58,59,76,77,78,79,80,81,82,83,84,85,86,87,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,135,136,138,139,140,141,142,143,145,147,148,149,150,151,152,153,154,155,173,186,187,188,193,197,198,199,200,207,208,210,211,212,213,214,216,218,219,220,221,],[-17,65,65,65,-96,-97,-98,65,65,65,65,-95,-99,65,-114,-112,-113,-8,-9,-10,-11,-12,-13,-14,-15,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-118,-115,-119,65,65,65,65,-125,-127,65,65,65,-89,-90,-91,-92,-93,-94,65,65,-126,-128,65,65,65,65,65,-120,-122,65,-129,-130,65,65,-121,65,65,-124,-123,]),'ELSE':([80,81,82,83,84,85,86,87,135,138,143,145,187,188,207,208,211,212,216,220,221,],[-8,-9,-10,-11,-12,-13,-14,-15,-118,-119,-125,-127,-126,-128,213,-122,-129,-130,-121,-124,-123,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,19,]),'declaration':([0,2,7,23,26,37,76,142,],[4,4,24,38,24,78,78,186,]),'function_definition':([0,2,],[5,5,]),'declaration_body':([0,2,7,23,26,37,76,142,],[6,6,6,6,6,6,6,6,]),'declarator':([0,2,8,16,25,42,71,],[7,7,26,34,39,39,134,]),'type_specifier':([0,2,7,23,26,32,37,52,76,131,142,],[8,8,25,25,25,71,25,120,25,71,25,]),'direct_declarator':([0,2,8,10,16,25,42,71,],[9,9,9,33,9,9,9,9,]),'pointer':([0,2,8,16,17,25,42,71,],[10,10,10,10,35,10,10,10,]),'identifier':([0,2,8,10,16,25,31,32,37,41,42,52,54,55,56,71,76,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,133,139,140,141,142,147,148,149,173,186,193,197,198,199,200,210,213,214,218,219,],[15,15,15,15,15,15,60,72,60,60,15,60,60,60,60,15,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,181,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'declaration_list_opt':([7,26,],[21,40,]),'empty':([7,8,25,26,31,32,37,76,104,123,142,147,186,198,199,200,210,213,214,218,219,],[22,28,28,22,44,69,75,137,158,177,137,137,137,137,137,137,137,137,137,137,137,]),'declaration_list':([7,26,],[23,23,]),'init_declarator_list_opt':([8,25,],[27,27,]),'init_declarator_list':([8,25,],[29,29,]),'init_declarator':([8,25,42,],[30,30,105,]),'compound_statement':([21,37,40,76,198,199,213,218,219,],[36,81,101,81,81,81,81,81,81,]),'constant_expression_opt':([31,],[43,]),'constant_expression':([31,],[45,]),'binary_expression':([31,37,41,52,76,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,139,140,141,142,147,148,149,186,193,197,198,199,200,210,213,214,218,219,],[46,99,99,99,99,99,99,99,160,161,162,163,164,165,166,167,168,169,170,171,172,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'cast_expression':([31,37,41,52,56,76,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,139,140,141,142,147,148,149,173,186,193,197,198,199,200,210,213,214,218,219,],[47,47,47,47,129,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,194,47,47,47,47,47,47,47,47,47,47,47,]),'unary_expression':([31,37,41,52,54,55,56,76,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,139,140,141,142,147,148,149,173,186,193,197,198,199,200,210,213,214,218,219,],[51,100,100,100,126,128,51,100,100,100,100,51,51,51,51,51,51,51,51,51,51,51,51,51,100,100,100,100,100,100,100,100,100,100,51,100,100,100,100,100,100,100,100,100,100,100,]),'postfix_expression':([31,37,41,52,54,55,56,76,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,139,140,141,142,147,148,149,173,186,193,197,198,199,200,210,213,214,218,219,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_operator':([31,37,41,52,54,55,56,76,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,139,140,141,142,147,148,149,173,186,193,197,198,199,200,210,213,214,218,219,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'primary_expression':([31,37,41,52,54,55,56,76,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,139,140,141,142,147,148,149,173,186,193,197,198,199,200,210,213,214,218,219,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'constant':([31,37,41,52,54,55,56,76,94,95,104,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,127,139,140,141,142,147,148,149,173,186,193,197,198,199,200,210,213,214,218,219,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'parameter_list':([32,],[66,]),'identifier_list_opt':([32,],[67,]),'parameter_declaration':([32,131,],[68,180,]),'identifier_list':([32,],[70,]),'block_item_list_opt':([37,],[74,]),'block_item_list':([37,],[76,]),'block_item':([37,76,],[77,136,]),'statement':([37,76,198,199,213,218,219,],[79,79,207,208,216,220,221,]),'expression_statement':([37,76,198,199,213,218,219,],[80,80,80,80,80,80,80,]),'selection_statement':([37,76,198,199,213,218,219,],[82,82,82,82,82,82,82,]),'iteration_statement':([37,76,198,199,213,218,219,],[83,83,83,83,83,83,83,]),'jump_statement':([37,76,198,199,213,218,219,],[84,84,84,84,84,84,84,]),'assert_statement':([37,76,198,199,213,218,219,],[85,85,85,85,85,85,85,]),'print_statement':([37,76,198,199,213,218,219,],[86,86,86,86,86,86,86,]),'read_statement':([37,76,198,199,213,218,219,],[87,87,87,87,87,87,87,]),'expression_opt':([37,76,142,147,186,198,199,200,210,213,214,218,219,],[88,88,185,189,201,88,88,209,215,88,217,88,88,]),'expression':([37,52,76,94,95,122,127,139,141,142,147,186,198,199,200,210,213,214,218,219,],[90,121,90,144,146,175,121,182,184,90,90,90,90,90,90,90,90,90,90,90,]),'assignment_expression':([37,41,52,76,94,95,104,122,123,127,139,140,141,142,147,148,149,186,193,197,198,199,200,210,213,214,218,219,],[98,103,98,98,98,98,103,98,179,98,98,183,98,98,98,179,191,98,103,206,98,98,98,98,98,98,98,98,]),'initializer':([41,104,193,],[102,159,205,]),'assignment_operator':([100,],[149,]),'initializer_list_opt':([104,],[156,]),'initializer_list':([104,],[157,]),'argument_expression_opt':([123,],[176,]),'argument_expression':([123,148,],[178,190,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',175),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',185),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',186),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_1','uc_parser.py',196),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_2','uc_parser.py',206),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition_1','uc_parser.py',213),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition_2','uc_parser.py',230),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',244),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',245),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',246),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',247),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',248),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',249),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',250),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',251),
  ('declaration_body -> type_specifier init_declarator_list_opt','declaration_body',2,'p_declaration_body','uc_parser.py',258),
  ('declaration -> declaration_body SEMI','declaration',2,'p_declaration','uc_parser.py',275),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',282),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',283),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',293),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',294),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',295),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',296),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',306),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',307),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',317),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',318),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_1','uc_parser.py',328),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_2','uc_parser.py',335),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',342),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',343),
  ('pointer -> TIMES','pointer',1,'p_pointer','uc_parser.py',350),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','uc_parser.py',351),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','uc_parser.py',373),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','uc_parser.py',384),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator_3','uc_parser.py',391),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',404),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',405),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',418),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',428),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','uc_parser.py',429),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',443),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',444),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',451),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',458),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',459),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',466),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',467),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',468),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',469),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',470),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',471),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',472),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',473),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',474),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',475),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',476),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',477),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',478),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',479),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','uc_parser.py',494),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','uc_parser.py',501),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','uc_parser.py',512),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',519),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',520),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',521),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','uc_parser.py',532),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','uc_parser.py',539),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression_3','uc_parser.py',550),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',561),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',562),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',573),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',574),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',591),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',592),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','uc_parser.py',599),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_2','uc_parser.py',606),
  ('primary_expression -> CHAR_CONST','primary_expression',1,'p_primary_expression_3','uc_parser.py',613),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_4','uc_parser.py',620),
  ('constant -> INT_CONST','constant',1,'p_constant_1','uc_parser.py',627),
  ('constant -> STRING_LITERAL','constant',1,'p_constant_2','uc_parser.py',638),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_3','uc_parser.py',649),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser.py',660),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser.py',661),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',678),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',679),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',686),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',687),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',702),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',703),
  ('assignment_operator -> DIVIDEEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',704),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',705),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',706),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',707),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser.py',714),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',715),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',716),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',717),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',718),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',725),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',726),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',740),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',754),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',755),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','uc_parser.py',762),
  ('initializer -> LBRACE initializer_list_opt RBRACE','initializer',3,'p_initializer_2','uc_parser.py',769),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','uc_parser.py',770),
  ('initializer_list_opt -> empty','initializer_list_opt',1,'p_initializer_list_opt','uc_parser.py',783),
  ('initializer_list_opt -> initializer_list','initializer_list_opt',1,'p_initializer_list_opt','uc_parser.py',784),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',791),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',792),
  ('block_item -> declaration','block_item',1,'p_block_item','uc_parser.py',806),
  ('block_item -> statement','block_item',1,'p_block_item','uc_parser.py',807),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','uc_parser.py',817),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','uc_parser.py',818),
  ('block_item_list_opt -> empty','block_item_list_opt',1,'p_block_item_list_opt','uc_parser.py',828),
  ('block_item_list_opt -> block_item_list','block_item_list_opt',1,'p_block_item_list_opt','uc_parser.py',829),
  ('compound_statement -> LBRACE block_item_list_opt RBRACE','compound_statement',3,'p_compound_statement','uc_parser.py',836),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',846),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','uc_parser.py',858),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','uc_parser.py',870),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','uc_parser.py',882),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement_2','uc_parser.py',893),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement_3','uc_parser.py',907),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','uc_parser.py',925),
  ('jump_statement -> RETURN expression SEMI','jump_statement',3,'p_jump_statement_2','uc_parser.py',934),
  ('jump_statement -> RETURN SEMI','jump_statement',2,'p_jump_statement_2','uc_parser.py',935),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',945),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',955),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',965),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',982),
]
