
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGELTLEleftPLUSMINUSPLUSPLUSMINUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIVIDE DIVIDEEQUAL ELSE EQ EQUALS FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSEQUAL MINUSMINUS MOD MODEQUAL NE NOT OR PLUS PLUSEQUAL PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING_LITERAL TIMES TIMESEQUAL VOID WHILE\n            program : global_declaration_list\n        \n            global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        \n            global_declaration : function_definition\n        \n            global_declaration : declaration\n        \n            function_definition : declarator declaration_list_opt compound_statement\n        \n            function_definition : type_specifier declarator declaration_list compound_statement\n        \n            declaration_list_opt : empty\n                                 | declaration_list\n        \n            declaration_list : declaration\n                             | declaration_list declaration\n        \n            declaration_body :  type_specifier init_declarator_list_opt\n        \n            declaration :  declaration_body SEMI\n        \n            type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n        \n            declarator : direct_declarator\n        \n            declarator : pointer direct_declarator\n        \n            pointer : TIMES\n                    | TIMES pointer\n        \n            direct_declarator : identifier\n        \n            direct_declarator : LPAREN declarator RPAREN\n        \n            direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET\n        \n            direct_declarator : direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier_list RPAREN\n        \n            identifier : ID\n        \n            identifier_list : identifier\n                            | identifier_list COMMA identifier\n        \n            constant_expression : binary_expression\n        \n            constant_expression_opt : empty\n                                    | constant_expression\n        \n            binary_expression : cast_expression\n                              | binary_expression  TIMES   binary_expression\n                              | binary_expression  DIVIDE  binary_expression\n                              | binary_expression  MOD     binary_expression\n                              | binary_expression  PLUS    binary_expression\n                              | binary_expression  MINUS   binary_expression\n                              | binary_expression  LT      binary_expression\n                              | binary_expression  LE      binary_expression\n                              | binary_expression  GT      binary_expression\n                              | binary_expression  GE      binary_expression\n                              | binary_expression  EQ      binary_expression\n                              | binary_expression  NE      binary_expression\n                              | binary_expression  AND     binary_expression\n                              | binary_expression  OR      binary_expression\n        \n            cast_expression : unary_expression\n        \n            cast_expression : LPAREN type_specifier RPAREN cast_expression\n        \n            unary_expression : postfix_expression\n        \n            unary_expression : PLUSPLUS unary_expression\n                             | MINUSMINUS unary_expression\n                             | unary_operator cast_expression\n        \n            postfix_expression : primary_expression\n        \n            postfix_expression : postfix_expression LBRACKET expression RBRACKET\n        \n            postfix_expression : postfix_expression LPAREN argument_expression_opt RPAREN\n        \n            postfix_expression : postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n        \n            argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n        \n            argument_expression_opt : empty\n                                    | argument_expression\n        \n            primary_expression : identifier\n        \n            primary_expression : constant\n        \n            primary_expression : STRING_LITERAL\n        \n            primary_expression : LPAREN expression RPAREN\n        \n            constant : INT_CONST\n        \n            constant : CHAR_CONST\n        \n            constant : FLOAT_CONST\n        \n            expression : assignment_expression\n                       | expression COMMA assignment_expression\n        \n            expression_opt : empty\n                           | expression\n        \n            assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n        \n            assignment_operator : EQUALS\n                                | TIMESEQUAL\n                                | DIVIDEEQUAL\n                                | MODEQUAL\n                                | PLUSEQUAL\n                                | MINUSEQUAL\n        \n            unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n        \n            parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n        \n            parameter_declaration : type_specifier declarator\n        \n            init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n        \n            init_declarator_list_opt : empty\n                                     | init_declarator_list\n        \n            init_declarator : declarator\n                            | declarator EQUALS initializer\n        \n            initializer : assignment_expression\n        \n            initializer : LBRACE initializer_list_opt RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n        \n            initializer_list_opt : empty\n                                 | initializer_list\n        \n            initializer_list : initializer\n                             | initializer_list COMMA initializer\n        \n            compound_statement : LBRACE declaration_list statement_list RBRACE\n        \n            statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n        \n            statement_list : statement_list statement\n                           | statement\n        \n            expression_statement : expression_opt SEMI\n        \n            selection_statement : IF LPAREN expression RPAREN statement\n        \n            selection_statement : IF LPAREN expression RPAREN statement ELSE statement\n        \n            iteration_statement : WHILE LPAREN expression RPAREN statement\n        \n            iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n        \n            iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        \n            jump_statement : BREAK SEMI\n        \n            jump_statement : RETURN expression_opt SEMI\n        \n            assert_statement : ASSERT expression SEMI\n        \n            print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n        \n            read_statement : READ LPAREN argument_expression RPAREN SEMI\n        \n            empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,6,9,15,18,19,22,23,25,30,32,33,36,37,38,40,52,71,72,73,80,105,106,107,165,170,],[11,11,-2,-4,-5,11,-18,-22,-27,-3,11,-10,11,-13,11,-19,-6,11,-11,11,11,-23,11,-7,-24,-25,11,-26,-102,11,]),'CHAR':([0,2,3,4,5,6,9,15,18,19,22,23,25,30,32,33,36,37,38,40,52,71,72,73,80,105,106,107,165,170,],[12,12,-2,-4,-5,12,-18,-22,-27,-3,12,-10,12,-13,12,-19,-6,12,-11,12,12,-23,12,-7,-24,-25,12,-26,-102,12,]),'INT':([0,2,3,4,5,6,9,15,18,19,22,23,25,30,32,33,36,37,38,40,52,71,72,73,80,105,106,107,165,170,],[13,13,-2,-4,-5,13,-18,-22,-27,-3,13,-10,13,-13,13,-19,-6,13,-11,13,13,-23,13,-7,-24,-25,13,-26,-102,13,]),'FLOAT':([0,2,3,4,5,6,9,15,18,19,22,23,25,30,32,33,36,37,38,40,52,71,72,73,80,105,106,107,165,170,],[14,14,-2,-4,-5,14,-18,-22,-27,-3,14,-10,14,-13,14,-19,-6,14,-11,14,14,-23,14,-7,-24,-25,14,-26,-102,14,]),'LPAREN':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,19,23,24,30,31,33,35,36,38,41,42,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,71,72,73,76,80,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,99,100,102,105,107,110,111,112,113,114,115,116,117,118,119,121,123,124,126,127,128,129,135,136,137,138,139,140,141,155,156,157,165,166,167,168,169,170,171,174,175,177,181,182,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[16,16,-2,-4,-5,16,32,16,-14,-15,-16,-17,-22,16,-20,-27,-3,-10,16,-13,52,32,-21,-6,-11,52,16,-82,-83,-84,52,98,102,102,52,-53,-81,-85,-62,-63,-64,-66,-67,-68,16,-23,52,-7,52,-24,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-56,-57,52,-25,-26,52,-112,-103,-104,-105,-106,-107,-108,-109,-110,168,169,170,52,52,174,175,52,-75,-76,-77,-78,-79,-80,52,-65,52,-102,-111,-113,52,52,52,-119,52,52,52,-54,-55,52,52,-120,-121,52,52,52,-114,-116,52,-122,-123,52,52,-115,52,52,-118,-117,]),'TIMES':([0,2,3,4,5,7,11,12,13,14,16,17,18,19,23,24,30,31,36,38,41,42,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,70,72,73,76,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,165,166,167,168,169,170,171,174,175,177,179,181,182,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[17,17,-2,-4,-5,17,-14,-15,-16,-17,17,17,-27,-3,-10,17,-13,48,-6,-11,48,17,81,-33,-82,-83,-84,-47,48,-49,48,48,48,-53,-81,-85,-62,-63,-64,-66,-67,-68,17,48,-7,48,81,-47,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-56,-57,-50,48,-51,-52,48,-112,-103,-104,-105,-106,-107,-108,-109,-110,48,48,48,-75,-76,-77,-78,-79,-80,-34,-35,-36,81,81,81,81,81,81,81,81,81,81,48,-65,48,-102,-111,-113,48,48,48,-119,48,48,48,-48,-54,-55,48,48,-120,-121,48,48,48,-114,-116,48,-122,-123,48,48,-115,48,48,-118,-117,]),'ID':([0,2,3,4,5,7,10,11,12,13,14,16,17,19,23,24,30,31,32,35,36,38,41,42,48,49,50,52,54,55,56,58,59,70,72,73,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,108,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,157,165,166,167,168,169,170,171,174,175,177,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[18,18,-2,-4,-5,18,18,-14,-15,-16,-17,18,-20,-3,-10,18,-13,18,18,-21,-6,-11,18,18,-82,-83,-84,18,18,18,18,-81,-85,18,18,-7,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-112,-103,-104,-105,-106,-107,-108,-109,-110,18,18,18,-75,-76,-77,-78,-79,-80,18,18,-102,-111,-113,18,18,18,-119,18,18,18,18,18,-120,-121,18,18,18,-114,-116,18,-122,-123,18,18,-115,18,18,-118,-117,]),'$end':([1,2,3,4,5,19,30,36,73,165,],[0,-1,-2,-4,-5,-3,-13,-6,-7,-102,]),'LBRACE':([6,9,15,18,20,21,22,23,30,33,38,40,41,71,72,76,80,105,107,110,111,112,113,114,115,116,117,118,119,165,166,167,171,177,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-124,-18,-22,-27,37,-8,-9,-10,-13,-19,-11,37,76,-23,37,76,-24,-25,-26,37,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,76,-120,-121,37,37,-114,-116,-122,-123,37,-115,37,37,-118,-117,]),'SEMI':([7,8,9,11,12,13,14,15,18,23,24,25,26,27,28,29,30,33,38,39,47,51,53,57,60,61,62,63,64,65,71,72,74,75,77,78,79,80,96,99,100,101,103,104,105,107,110,111,112,113,114,115,116,117,118,119,120,122,125,126,130,142,143,144,145,146,147,148,149,150,151,152,153,154,156,165,166,167,170,171,172,173,176,178,179,180,181,182,186,187,188,189,192,195,196,197,198,199,200,201,202,203,205,206,207,210,212,213,214,215,],[-124,30,-18,-14,-15,-16,-17,-22,-27,-10,-124,-93,-12,-91,-92,-89,-13,-19,-11,-93,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,-23,-124,-94,-95,-73,-47,-90,-24,-69,-56,-57,-50,-51,-52,-25,-26,-124,-112,-103,-104,-105,-106,-107,-108,-109,-110,167,-72,171,-124,-71,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-65,-102,-111,-113,-124,-119,188,189,-96,-74,-48,-70,-54,-55,197,-124,-120,-121,-97,-124,-124,-124,204,205,206,-114,-116,208,-122,-123,-124,-115,-124,-124,-118,-117,]),'EQUALS':([9,15,18,25,33,39,51,53,57,60,61,62,63,64,65,71,78,80,99,100,101,103,104,105,107,156,179,181,182,],[-18,-22,-27,41,-19,41,-47,-49,-53,-62,-63,-64,-66,-67,-68,-23,136,-24,-56,-57,-50,-51,-52,-25,-26,-65,-48,-54,-55,]),'COMMA':([9,15,18,25,28,29,33,39,47,51,53,57,60,61,62,63,64,65,66,67,68,69,71,74,75,77,78,79,80,95,96,99,100,101,103,104,105,107,109,122,132,134,142,143,144,145,146,147,148,149,150,151,152,153,154,156,158,161,162,163,164,173,176,178,179,180,181,182,184,185,191,192,193,194,],[-18,-22,-27,-93,42,-89,-19,-93,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,106,108,-86,-28,-23,-94,-95,-73,-47,-90,-24,157,-69,-56,-57,-50,-51,-52,-25,-26,-88,157,177,-100,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-65,157,183,-58,-87,-29,157,-96,-74,-48,-70,-54,-55,157,157,183,-97,-101,-59,]),'RPAREN':([9,11,12,13,14,15,18,33,34,47,51,53,57,60,61,62,63,64,65,66,67,68,69,71,77,78,80,94,95,96,98,99,100,101,103,104,105,107,109,122,130,142,143,144,145,146,147,148,149,150,151,152,153,154,156,159,160,161,162,163,164,174,178,179,180,181,182,184,185,190,191,194,204,208,209,211,],[-18,-14,-15,-16,-17,-22,-27,-19,71,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,105,107,-86,-28,-23,-73,-47,-24,155,156,-69,-124,-56,-57,-50,-51,-52,-25,-26,-88,-72,-71,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-65,182,-60,-61,-58,-87,-29,-124,-74,-48,-70,-54,-55,195,196,199,200,-59,-124,-124,212,213,]),'LBRACKET':([9,15,18,33,53,57,60,61,62,63,64,65,71,80,99,100,105,107,156,181,182,],[31,-22,-27,31,97,-53,-62,-63,-64,-66,-67,-68,-23,-24,-56,-57,-25,-26,-65,-54,-55,]),'PLUSPLUS':([18,23,30,31,38,41,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,99,100,102,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,156,157,165,166,167,168,169,170,171,174,175,177,181,182,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-27,-10,-13,54,-11,54,-82,-83,-84,54,99,54,54,54,-53,-81,-85,-62,-63,-64,-66,-67,-68,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-56,-57,54,54,-112,-103,-104,-105,-106,-107,-108,-109,-110,54,54,54,-75,-76,-77,-78,-79,-80,54,-65,54,-102,-111,-113,54,54,54,-119,54,54,54,-54,-55,54,54,-120,-121,54,54,54,-114,-116,54,-122,-123,54,54,-115,54,54,-118,-117,]),'MINUSMINUS':([18,23,30,31,38,41,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,99,100,102,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,156,157,165,166,167,168,169,170,171,174,175,177,181,182,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-27,-10,-13,55,-11,55,-82,-83,-84,55,100,55,55,55,-53,-81,-85,-62,-63,-64,-66,-67,-68,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-56,-57,55,55,-112,-103,-104,-105,-106,-107,-108,-109,-110,55,55,55,-75,-76,-77,-78,-79,-80,55,-65,55,-102,-111,-113,55,55,55,-119,55,55,55,-54,-55,55,55,-120,-121,55,55,55,-114,-116,55,-122,-123,55,55,-115,55,55,-118,-117,]),'DIVIDE':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,82,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,82,-47,-56,-57,-50,-51,-52,-34,-35,-36,82,82,82,82,82,82,82,82,82,82,-65,-48,-54,-55,]),'MOD':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,83,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,83,-47,-56,-57,-50,-51,-52,-34,-35,-36,83,83,83,83,83,83,83,83,83,83,-65,-48,-54,-55,]),'PLUS':([18,23,30,31,38,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,76,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,165,166,167,168,169,170,171,174,175,177,179,181,182,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-27,-10,-13,49,-11,49,84,-33,-82,-83,-84,-47,49,-49,49,49,49,-53,-81,-85,-62,-63,-64,-66,-67,-68,49,49,84,-47,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-56,-57,-50,49,-51,-52,49,-112,-103,-104,-105,-106,-107,-108,-109,-110,49,49,49,-75,-76,-77,-78,-79,-80,-34,-35,-36,-37,-38,84,84,84,84,84,84,84,84,49,-65,49,-102,-111,-113,49,49,49,-119,49,49,49,-48,-54,-55,49,49,-120,-121,49,49,49,-114,-116,49,-122,-123,49,49,-115,49,49,-118,-117,]),'MINUS':([18,23,30,31,38,41,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,72,76,77,78,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,99,100,101,102,103,104,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,165,166,167,168,169,170,171,174,175,177,179,181,182,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-27,-10,-13,50,-11,50,85,-33,-82,-83,-84,-47,50,-49,50,50,50,-53,-81,-85,-62,-63,-64,-66,-67,-68,50,50,85,-47,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-56,-57,-50,50,-51,-52,50,-112,-103,-104,-105,-106,-107,-108,-109,-110,50,50,50,-75,-76,-77,-78,-79,-80,-34,-35,-36,-37,-38,85,85,85,85,85,85,85,85,50,-65,50,-102,-111,-113,50,50,50,-119,50,50,50,-48,-54,-55,50,50,-120,-121,50,50,50,-114,-116,50,-122,-123,50,50,-115,50,50,-118,-117,]),'LT':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,86,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,86,-47,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,86,86,86,86,-65,-48,-54,-55,]),'LE':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,87,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,87,-47,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,87,87,87,87,-65,-48,-54,-55,]),'GT':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,88,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,88,-47,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,88,88,88,88,-65,-48,-54,-55,]),'GE':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,89,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,89,-47,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,89,89,89,89,-65,-48,-54,-55,]),'EQ':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,90,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,90,-47,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,90,90,-65,-48,-54,-55,]),'NE':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,91,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,91,-47,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,91,91,-65,-48,-54,-55,]),'AND':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,92,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,92,-47,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,92,-65,-48,-54,-55,]),'OR':([18,46,47,51,53,57,60,61,62,63,64,65,77,78,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,179,181,182,],[-27,93,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,93,-47,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-65,-48,-54,-55,]),'RBRACKET':([18,31,43,44,45,46,47,51,53,57,60,61,62,63,64,65,77,78,96,99,100,101,103,104,142,143,144,145,146,147,148,149,150,151,152,153,154,156,158,178,179,180,181,182,],[-27,-124,80,-31,-32,-30,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,-73,-47,-69,-56,-57,-50,-51,-52,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-65,181,-74,-48,-70,-54,-55,]),'TIMESEQUAL':([18,51,53,57,60,61,62,63,64,65,78,99,100,101,103,104,156,179,181,182,],[-27,-47,-49,-53,-62,-63,-64,-66,-67,-68,137,-56,-57,-50,-51,-52,-65,-48,-54,-55,]),'DIVIDEEQUAL':([18,51,53,57,60,61,62,63,64,65,78,99,100,101,103,104,156,179,181,182,],[-27,-47,-49,-53,-62,-63,-64,-66,-67,-68,138,-56,-57,-50,-51,-52,-65,-48,-54,-55,]),'MODEQUAL':([18,51,53,57,60,61,62,63,64,65,78,99,100,101,103,104,156,179,181,182,],[-27,-47,-49,-53,-62,-63,-64,-66,-67,-68,139,-56,-57,-50,-51,-52,-65,-48,-54,-55,]),'PLUSEQUAL':([18,51,53,57,60,61,62,63,64,65,78,99,100,101,103,104,156,179,181,182,],[-27,-47,-49,-53,-62,-63,-64,-66,-67,-68,140,-56,-57,-50,-51,-52,-65,-48,-54,-55,]),'MINUSEQUAL':([18,51,53,57,60,61,62,63,64,65,78,99,100,101,103,104,156,179,181,182,],[-27,-47,-49,-53,-62,-63,-64,-66,-67,-68,141,-56,-57,-50,-51,-52,-65,-48,-54,-55,]),'RBRACE':([18,47,51,53,57,60,61,62,63,64,65,75,76,77,78,99,100,101,103,104,110,111,112,113,114,115,116,117,118,119,131,132,133,134,142,143,144,145,146,147,148,149,150,151,152,153,154,156,165,166,167,171,176,177,178,179,181,182,188,189,192,193,201,202,205,206,210,214,215,],[-27,-33,-47,-49,-53,-62,-63,-64,-66,-67,-68,-95,-124,-73,-47,-56,-57,-50,-51,-52,165,-112,-103,-104,-105,-106,-107,-108,-109,-110,176,-99,-98,-100,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-65,-102,-111,-113,-119,-96,192,-74,-48,-54,-55,-120,-121,-97,-101,-114,-116,-122,-123,-115,-118,-117,]),'IF':([23,30,38,72,110,111,112,113,114,115,116,117,118,119,165,166,167,171,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-10,-13,-11,121,121,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,-120,-121,121,121,-114,-116,-122,-123,121,-115,121,121,-118,-117,]),'WHILE':([23,30,38,72,110,111,112,113,114,115,116,117,118,119,165,166,167,171,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-10,-13,-11,123,123,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,-120,-121,123,123,-114,-116,-122,-123,123,-115,123,123,-118,-117,]),'FOR':([23,30,38,72,110,111,112,113,114,115,116,117,118,119,165,166,167,171,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-10,-13,-11,124,124,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,-120,-121,124,124,-114,-116,-122,-123,124,-115,124,124,-118,-117,]),'BREAK':([23,30,38,72,110,111,112,113,114,115,116,117,118,119,165,166,167,171,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-10,-13,-11,125,125,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,-120,-121,125,125,-114,-116,-122,-123,125,-115,125,125,-118,-117,]),'RETURN':([23,30,38,72,110,111,112,113,114,115,116,117,118,119,165,166,167,171,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-10,-13,-11,126,126,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,-120,-121,126,126,-114,-116,-122,-123,126,-115,126,126,-118,-117,]),'ASSERT':([23,30,38,72,110,111,112,113,114,115,116,117,118,119,165,166,167,171,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-10,-13,-11,127,127,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,-120,-121,127,127,-114,-116,-122,-123,127,-115,127,127,-118,-117,]),'PRINT':([23,30,38,72,110,111,112,113,114,115,116,117,118,119,165,166,167,171,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-10,-13,-11,128,128,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,-120,-121,128,128,-114,-116,-122,-123,128,-115,128,128,-118,-117,]),'READ':([23,30,38,72,110,111,112,113,114,115,116,117,118,119,165,166,167,171,188,189,195,196,201,202,205,206,207,210,212,213,214,215,],[-10,-13,-11,129,129,-112,-103,-104,-105,-106,-107,-108,-109,-110,-102,-111,-113,-119,-120,-121,129,129,-114,-116,-122,-123,129,-115,129,129,-118,-117,]),'ADDRESS':([23,30,31,38,41,48,49,50,52,54,55,56,58,59,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,157,165,166,167,168,169,170,171,174,175,177,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-10,-13,58,-11,58,-82,-83,-84,58,58,58,58,-81,-85,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-112,-103,-104,-105,-106,-107,-108,-109,-110,58,58,58,-75,-76,-77,-78,-79,-80,58,58,-102,-111,-113,58,58,58,-119,58,58,58,58,58,-120,-121,58,58,58,-114,-116,58,-122,-123,58,58,-115,58,58,-118,-117,]),'NOT':([23,30,31,38,41,48,49,50,52,54,55,56,58,59,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,157,165,166,167,168,169,170,171,174,175,177,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-10,-13,59,-11,59,-82,-83,-84,59,59,59,59,-81,-85,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-112,-103,-104,-105,-106,-107,-108,-109,-110,59,59,59,-75,-76,-77,-78,-79,-80,59,59,-102,-111,-113,59,59,59,-119,59,59,59,59,59,-120,-121,59,59,59,-114,-116,59,-122,-123,59,59,-115,59,59,-118,-117,]),'STRING_LITERAL':([23,30,31,38,41,48,49,50,52,54,55,56,58,59,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,157,165,166,167,168,169,170,171,174,175,177,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-10,-13,62,-11,62,-82,-83,-84,62,62,62,62,-81,-85,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-112,-103,-104,-105,-106,-107,-108,-109,-110,62,62,62,-75,-76,-77,-78,-79,-80,62,62,-102,-111,-113,62,62,62,-119,62,62,62,62,62,-120,-121,62,62,62,-114,-116,62,-122,-123,62,62,-115,62,62,-118,-117,]),'INT_CONST':([23,30,31,38,41,48,49,50,52,54,55,56,58,59,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,157,165,166,167,168,169,170,171,174,175,177,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-10,-13,63,-11,63,-82,-83,-84,63,63,63,63,-81,-85,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-112,-103,-104,-105,-106,-107,-108,-109,-110,63,63,63,-75,-76,-77,-78,-79,-80,63,63,-102,-111,-113,63,63,63,-119,63,63,63,63,63,-120,-121,63,63,63,-114,-116,63,-122,-123,63,63,-115,63,63,-118,-117,]),'CHAR_CONST':([23,30,31,38,41,48,49,50,52,54,55,56,58,59,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,157,165,166,167,168,169,170,171,174,175,177,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-10,-13,64,-11,64,-82,-83,-84,64,64,64,64,-81,-85,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-112,-103,-104,-105,-106,-107,-108,-109,-110,64,64,64,-75,-76,-77,-78,-79,-80,64,64,-102,-111,-113,64,64,64,-119,64,64,64,64,64,-120,-121,64,64,64,-114,-116,64,-122,-123,64,64,-115,64,64,-118,-117,]),'FLOAT_CONST':([23,30,31,38,41,48,49,50,52,54,55,56,58,59,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,111,112,113,114,115,116,117,118,119,126,127,135,136,137,138,139,140,141,155,157,165,166,167,168,169,170,171,174,175,177,183,187,188,189,195,196,197,201,202,204,205,206,207,208,210,212,213,214,215,],[-10,-13,65,-11,65,-82,-83,-84,65,65,65,65,-81,-85,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-112,-103,-104,-105,-106,-107,-108,-109,-110,65,65,65,-75,-76,-77,-78,-79,-80,65,65,-102,-111,-113,65,65,65,-119,65,65,65,65,65,-120,-121,65,65,65,-114,-116,65,-122,-123,65,65,-115,65,65,-118,-117,]),'ELSE':([112,113,114,115,116,117,118,119,165,167,171,188,189,201,202,205,206,210,214,215,],[-103,-104,-105,-106,-107,-108,-109,-110,-102,-113,-119,-120,-121,207,-116,-122,-123,-115,-118,-117,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,19,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,6,22,25,37,40,72,170,],[5,5,23,38,23,23,38,38,187,]),'declarator':([0,2,7,16,24,42,70,],[6,6,25,34,39,39,109,]),'type_specifier':([0,2,6,22,25,32,37,40,52,72,106,170,],[7,7,24,24,24,70,24,24,94,24,70,24,]),'declaration_body':([0,2,6,22,25,37,40,72,170,],[8,8,8,8,8,8,8,8,8,]),'direct_declarator':([0,2,7,10,16,24,42,70,],[9,9,9,33,9,9,9,9,]),'pointer':([0,2,7,16,17,24,42,70,],[10,10,10,10,35,10,10,10,]),'identifier':([0,2,7,10,16,24,31,32,41,42,52,54,55,56,70,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,108,110,126,127,135,155,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[15,15,15,15,15,15,60,69,60,15,60,60,60,60,15,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,164,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'declaration_list_opt':([6,],[20,]),'empty':([6,7,24,31,72,76,98,110,126,170,174,187,195,196,197,204,207,208,212,213,],[21,27,27,44,130,133,160,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'declaration_list':([6,25,37,],[22,40,72,]),'init_declarator_list_opt':([7,24,],[26,26,]),'init_declarator_list':([7,24,],[28,28,]),'init_declarator':([7,24,42,],[29,29,79,]),'compound_statement':([20,40,72,110,195,196,207,212,213,],[36,73,113,113,113,113,113,113,113,]),'constant_expression_opt':([31,],[43,]),'constant_expression':([31,],[45,]),'binary_expression':([31,41,52,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,126,127,135,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[46,77,77,77,77,142,143,144,145,146,147,148,149,150,151,152,153,154,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'cast_expression':([31,41,52,56,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,126,127,135,155,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[47,47,47,104,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,179,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_expression':([31,41,52,54,55,56,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,126,127,135,155,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[51,78,78,101,103,51,78,78,51,51,51,51,51,51,51,51,51,51,51,51,51,78,78,78,78,78,78,78,51,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'postfix_expression':([31,41,52,54,55,56,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,126,127,135,155,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_operator':([31,41,52,54,55,56,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,126,127,135,155,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'primary_expression':([31,41,52,54,55,56,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,126,127,135,155,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'constant':([31,41,52,54,55,56,72,76,81,82,83,84,85,86,87,88,89,90,91,92,93,97,98,102,110,126,127,135,155,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'parameter_list':([32,],[66,]),'identifier_list':([32,],[67,]),'parameter_declaration':([32,106,],[68,163,]),'initializer':([41,76,177,],[74,134,193,]),'assignment_expression':([41,52,72,76,97,98,102,110,126,127,135,157,168,169,170,174,175,177,183,187,195,196,197,204,207,208,212,213,],[75,96,96,75,96,162,96,96,96,96,178,180,96,96,96,96,162,75,194,96,96,96,96,96,96,96,96,96,]),'expression':([52,72,97,102,110,126,127,168,169,170,174,187,195,196,197,204,207,208,212,213,],[95,122,158,95,122,122,173,184,185,122,122,122,122,122,122,122,122,122,122,122,]),'statement_list':([72,],[110,]),'statement':([72,110,195,196,207,212,213,],[111,166,201,202,210,214,215,]),'expression_statement':([72,110,195,196,207,212,213,],[112,112,112,112,112,112,112,]),'selection_statement':([72,110,195,196,207,212,213,],[114,114,114,114,114,114,114,]),'iteration_statement':([72,110,195,196,207,212,213,],[115,115,115,115,115,115,115,]),'jump_statement':([72,110,195,196,207,212,213,],[116,116,116,116,116,116,116,]),'assert_statement':([72,110,195,196,207,212,213,],[117,117,117,117,117,117,117,]),'print_statement':([72,110,195,196,207,212,213,],[118,118,118,118,118,118,118,]),'read_statement':([72,110,195,196,207,212,213,],[119,119,119,119,119,119,119,]),'expression_opt':([72,110,126,170,174,187,195,196,197,204,207,208,212,213,],[120,120,172,186,190,198,120,120,203,209,120,211,120,120,]),'initializer_list_opt':([76,],[131,]),'initializer_list':([76,],[132,]),'assignment_operator':([78,],[135,]),'argument_expression_opt':([98,],[159,]),'argument_expression':([98,175,],[161,191,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',161),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',171),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',172),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_1','uc_parser.py',182),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_2','uc_parser.py',189),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition_1','uc_parser.py',199),
  ('function_definition -> type_specifier declarator declaration_list compound_statement','function_definition',4,'p_function_definition_2','uc_parser.py',216),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',230),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','uc_parser.py',231),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',238),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',239),
  ('declaration_body -> type_specifier init_declarator_list_opt','declaration_body',2,'p_declaration_body','uc_parser.py',249),
  ('declaration -> declaration_body SEMI','declaration',2,'p_declaration','uc_parser.py',266),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',273),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',274),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',275),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',276),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_1','uc_parser.py',286),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_2','uc_parser.py',293),
  ('pointer -> TIMES','pointer',1,'p_pointer','uc_parser.py',300),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','uc_parser.py',301),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','uc_parser.py',323),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','uc_parser.py',334),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator_3','uc_parser.py',341),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',354),
  ('direct_declarator -> direct_declarator LPAREN identifier_list RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',355),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',368),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',375),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','uc_parser.py',376),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',390),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',397),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',398),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',405),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',406),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',407),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',408),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',409),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',410),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',411),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',412),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',413),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',414),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',415),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',416),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',417),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',418),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','uc_parser.py',433),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','uc_parser.py',440),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','uc_parser.py',451),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',458),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',459),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',460),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','uc_parser.py',471),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','uc_parser.py',478),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression_3','uc_parser.py',489),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',500),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',501),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',512),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',513),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',527),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',528),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','uc_parser.py',535),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_2','uc_parser.py',542),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression_3','uc_parser.py',549),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_4','uc_parser.py',556),
  ('constant -> INT_CONST','constant',1,'p_constant_1','uc_parser.py',563),
  ('constant -> CHAR_CONST','constant',1,'p_constant_2','uc_parser.py',574),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_3','uc_parser.py',585),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser.py',596),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser.py',597),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',614),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',615),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',622),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',623),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',638),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',639),
  ('assignment_operator -> DIVIDEEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',640),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',641),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',642),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',643),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser.py',650),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',651),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',652),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',653),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',654),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',661),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',662),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',676),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',683),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',684),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',694),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',695),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',702),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',703),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','uc_parser.py',713),
  ('initializer -> LBRACE initializer_list_opt RBRACE','initializer',3,'p_initializer_2','uc_parser.py',720),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','uc_parser.py',721),
  ('initializer_list_opt -> empty','initializer_list_opt',1,'p_initializer_list_opt','uc_parser.py',734),
  ('initializer_list_opt -> initializer_list','initializer_list_opt',1,'p_initializer_list_opt','uc_parser.py',735),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',742),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',743),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement','uc_parser.py',757),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',764),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',765),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',766),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',767),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',768),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',769),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',770),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',771),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','uc_parser.py',778),
  ('statement_list -> statement','statement_list',1,'p_statement_list','uc_parser.py',779),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',789),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement_1','uc_parser.py',801),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement_2','uc_parser.py',813),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','uc_parser.py',825),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement_2','uc_parser.py',836),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement_3','uc_parser.py',849),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','uc_parser.py',867),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement_2','uc_parser.py',876),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',886),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',893),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',900),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',914),
]
