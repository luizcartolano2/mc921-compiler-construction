
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGELTLEleftPLUSMINUSPLUSPLUSMINUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIVIDE DIVIDEEQUAL ELSE EQ EQUALS FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSEQUAL MINUSMINUS MOD MODEQUAL NE NOT OR PLUS PLUSEQUAL PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING_LITERAL TIMES TIMESEQUAL VOID WHILE\n            program : global_declaration_list\n        \n            global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        \n            global_declaration : function_definition\n                               | declaration\n        \n            function_definition : declarator declaration_list compound_statement\n                                | type_specifier declarator declaration_list compound_statement\n        \n            declaration_list : declaration\n                             | declaration_list declaration\n        \n            declaration :  type_specifier init_declarator_list_opt SEMI\n        \n            type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n        \n            declarator : pointer direct_declarator\n        \n            pointer : TIMES\n                    | TIMES pointer   \n        \n            direct_declarator : identifier \n                              | LPAREN declarator RPAREN \n                              | direct_declarator LBRACKET constant_expression_opt RBRACKET\n                              | direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier_list_opt RPAREN\n        \n            identifier : ID\n        \n            identifier_list : identifier\n                            | identifier_list identifier\n         \n            identifier_list_opt : identifier_list\n                                | empty\n        \n            constant_expression : binary_expression\n        \n            constant_expression_opt : empty\n                                    | constant_expression\n        \n            binary_expression : cast_expression\n                              | binary_expression  TIMES   binary_expression\n                              | binary_expression  DIVIDE  binary_expression\n                              | binary_expression  MOD     binary_expression\n                              | binary_expression  PLUS    binary_expression\n                              | binary_expression  MINUS   binary_expression\n                              | binary_expression  LT      binary_expression\n                              | binary_expression  LE      binary_expression\n                              | binary_expression  GT      binary_expression\n                              | binary_expression  GE      binary_expression\n                              | binary_expression  EQ      binary_expression\n                              | binary_expression  NE      binary_expression\n                              | binary_expression  AND     binary_expression\n                              | binary_expression  OR      binary_expression\n        \n            cast_expression : unary_expression\n                            | LPAREN type_specifier RPAREN cast_expression\n        \n            unary_expression : postfix_expression\n                             | PLUSPLUS unary_expression\n                             | MINUSMINUS unary_expression\n                             | unary_operator cast_expression\n        \n            postfix_expression : primary_expression\n                               | postfix_expression LBRACKET expression RBRACKET\n                               | postfix_expression LPAREN argument_expression_opt RPAREN\n                               | postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n        \n            argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n        \n            argument_expression_opt : empty\n                                    | argument_expression\n        \n            primary_expression : identifier\n                               | constant\n                               | STRING_LITERAL\n                               | LPAREN expression RPAREN\n        \n            constant : INT_CONST\n                     | CHAR_CONST\n                     | FLOAT_CONST\n        \n            expression : assignment_expression\n                       | expression COMMA assignment_expression\n        \n            expression_opt : empty\n                           | expression\n        \n            assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n        \n            assignment_operator : EQUALS\n                                | TIMESEQUAL\n                                | DIVIDEEQUAL\n                                | MODEQUAL\n                                | PLUSEQUAL\n                                | MINUSEQUAL\n        \n            unary_operator : ADDRESS    \n                           | TIMES      \n                           | PLUS       \n                           | MINUS      \n                           | NOT        \n        \n            parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n        \n            parameter_declaration : type_specifier declarator\n        \n            init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n        \n            init_declarator_list_opt : empty\n                                     | init_declarator_list\n        \n            init_declarator : declarator\n                            | declarator EQUALS initializer\n        \n            initializer : assignment_expression\n                        | LBRACE initializer_list_opt RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n        \n            initializer_list : initializer\n                             | initializer_list COMMA initializer\n        \n            initializer_list_opt : empty\n                                 | initializer_list\n        \n            compound_statement : LBRACE declaration_list statement_list RBRACE\n        \n            statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n        \n            statement_list : statement_list statement\n                           | statement\n        \n            expression_statement : expression_opt SEMI\n        \n            selection_statement : IF LPAREN expression RPAREN statement\n                                | IF LPAREN expression RPAREN statement ELSE statement\n        \n            iteration_statement : WHILE LPAREN expression RPAREN statement\n                                | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        \n            jump_statement : BREAK SEMI\n                           | RETURN expression_opt SEMI\n        \n            assert_statement : ASSERT expression SEMI\n        \n            print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n        \n            read_statement : READ LPAREN argument_expression RPAREN SEMI\n        \n            empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,6,14,15,16,18,23,24,26,28,29,30,32,34,37,39,40,54,77,134,135,136,137,140,146,],[9,9,-2,-4,-5,9,-3,9,-8,9,-15,-18,-23,-6,-9,9,9,-10,9,9,-7,9,-19,-20,-21,9,-22,-100,9,]),'CHAR':([0,2,3,4,5,6,14,15,16,18,23,24,26,28,29,30,32,34,37,39,40,54,77,134,135,136,137,140,146,],[10,10,-2,-4,-5,10,-3,10,-8,10,-15,-18,-23,-6,-9,10,10,-10,10,10,-7,10,-19,-20,-21,10,-22,-100,10,]),'INT':([0,2,3,4,5,6,14,15,16,18,23,24,26,28,29,30,32,34,37,39,40,54,77,134,135,136,137,140,146,],[11,11,-2,-4,-5,11,-3,11,-8,11,-15,-18,-23,-6,-9,11,11,-10,11,11,-7,11,-19,-20,-21,11,-22,-100,11,]),'FLOAT':([0,2,3,4,5,6,14,15,16,18,23,24,26,28,29,30,32,34,37,39,40,54,77,134,135,136,137,140,146,],[12,12,-2,-4,-5,12,-3,12,-8,12,-15,-18,-23,-6,-9,12,12,-10,12,12,-7,12,-19,-20,-21,12,-22,-100,12,]),'TIMES':([0,2,3,4,5,7,9,10,11,12,13,14,16,17,25,26,28,29,33,34,35,36,39,40,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,75,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,141,142,143,144,145,146,147,150,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,173,174,180,181,182,187,188,189,190,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[13,13,-2,-4,-5,13,-11,-12,-13,-14,13,-3,-8,13,13,-23,-6,-9,47,-10,13,47,47,-7,47,104,-45,-31,-80,-81,-82,-47,47,47,47,47,-51,-79,-83,-60,-61,-62,-64,-65,-66,104,-45,13,47,-110,-101,-102,-103,-104,-105,-106,-107,-108,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-73,-74,-75,-76,-77,-78,47,47,-54,-55,-48,47,-49,-50,-100,-109,-111,47,47,47,47,-117,47,47,47,-32,-33,-34,104,104,104,104,104,104,104,104,104,104,47,-63,47,-118,-119,-52,-53,47,-46,47,47,47,-112,-114,47,-120,-121,47,47,-113,47,47,-116,-115,]),'$end':([1,2,3,4,5,14,28,34,40,140,],[0,-1,-2,-4,-5,-3,-6,-10,-7,-100,]),'SEMI':([7,9,10,11,12,16,17,18,19,20,21,22,23,24,26,29,31,34,39,41,42,44,45,46,50,55,58,59,60,61,62,63,64,69,77,78,79,80,81,82,83,84,85,86,87,88,90,93,94,98,99,126,127,128,130,131,134,135,137,140,141,142,146,147,148,149,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,174,177,179,180,181,182,185,187,188,190,191,192,193,194,195,196,198,199,200,202,203,204,207,209,210,211,212,],[-122,-11,-12,-13,-14,-8,-122,-91,34,-89,-90,-87,-15,-18,-23,-9,-91,-10,-122,-92,-93,-71,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,-88,-45,-19,-122,-110,-101,-102,-103,-104,-105,-106,-107,-108,142,-70,147,-122,-69,-67,-54,-55,-48,-49,-50,-20,-21,-22,-100,-109,-111,-122,-117,181,182,-94,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-72,-63,-68,193,-122,-118,-119,-95,-52,-53,-46,-122,-122,-122,201,202,203,-112,-114,205,-120,-121,-122,-113,-122,-122,-116,-115,]),'LPAREN':([8,13,16,23,24,26,27,29,33,34,36,39,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,77,78,79,80,81,82,83,84,85,86,87,89,91,92,94,95,96,97,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,134,135,137,140,141,142,143,144,145,146,147,150,151,153,173,174,180,181,182,187,188,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[25,-16,-8,37,-18,-23,-17,-9,54,-10,54,54,54,-80,-81,-82,125,129,129,54,54,-51,-79,-83,-60,-61,-62,-64,-65,-66,-19,54,-110,-101,-102,-103,-104,-105,-106,-107,-108,143,145,146,54,54,150,151,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-73,-74,-75,-76,-77,-78,54,54,-54,-55,54,-20,-21,-22,-100,-109,-111,54,54,54,54,-117,54,54,54,54,-63,54,-118,-119,-52,-53,54,54,54,54,-112,-114,54,-120,-121,54,54,-113,54,54,-116,-115,]),'ID':([8,13,16,26,27,29,33,34,36,37,39,43,47,48,49,51,52,53,54,56,57,73,76,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,138,140,141,142,143,144,145,146,147,150,151,153,173,180,181,182,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[26,-16,-8,-23,-17,-9,26,-10,26,26,26,26,-80,-81,-82,26,26,26,26,-79,-83,26,-24,26,-110,-101,-102,-103,-104,-105,-106,-107,-108,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,-73,-74,-75,-76,-77,-78,26,26,26,-25,-100,-109,-111,26,26,26,26,-117,26,26,26,26,26,-118,-119,26,26,26,26,-112,-114,26,-120,-121,26,26,-113,26,26,-116,-115,]),'RPAREN':([9,10,11,12,23,24,26,37,38,44,45,46,50,55,58,59,60,61,62,63,69,70,71,72,73,74,76,77,90,98,99,125,126,127,128,130,131,132,133,134,135,137,138,139,150,154,155,156,157,158,159,160,161,162,163,164,165,166,167,169,170,171,172,174,175,176,177,178,183,184,187,188,190,197,201,205,206,208,],[-11,-12,-13,-14,-15,-18,-23,-122,77,-71,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,-45,135,137,-84,-26,-27,-24,-19,-70,-69,-67,-122,-54,-55,-48,-49,-50,173,174,-20,-21,-22,-25,-86,-122,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-72,188,-58,-59,-56,-63,-85,191,-68,192,195,196,-52,-53,-46,-57,-122,-122,209,210,]),'LBRACE':([15,16,29,32,33,34,39,43,78,79,80,81,82,83,84,85,86,87,140,141,142,147,153,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[30,-8,-9,30,43,-10,30,43,30,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,43,-118,-119,30,30,-112,-114,-120,-121,30,-113,30,30,-116,-115,]),'IF':([16,29,34,39,78,79,80,81,82,83,84,85,86,87,140,141,142,147,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[-8,-9,-10,89,89,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,-118,-119,89,89,-112,-114,-120,-121,89,-113,89,89,-116,-115,]),'WHILE':([16,29,34,39,78,79,80,81,82,83,84,85,86,87,140,141,142,147,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[-8,-9,-10,91,91,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,-118,-119,91,91,-112,-114,-120,-121,91,-113,91,91,-116,-115,]),'FOR':([16,29,34,39,78,79,80,81,82,83,84,85,86,87,140,141,142,147,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[-8,-9,-10,92,92,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,-118,-119,92,92,-112,-114,-120,-121,92,-113,92,92,-116,-115,]),'BREAK':([16,29,34,39,78,79,80,81,82,83,84,85,86,87,140,141,142,147,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[-8,-9,-10,93,93,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,-118,-119,93,93,-112,-114,-120,-121,93,-113,93,93,-116,-115,]),'RETURN':([16,29,34,39,78,79,80,81,82,83,84,85,86,87,140,141,142,147,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[-8,-9,-10,94,94,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,-118,-119,94,94,-112,-114,-120,-121,94,-113,94,94,-116,-115,]),'ASSERT':([16,29,34,39,78,79,80,81,82,83,84,85,86,87,140,141,142,147,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[-8,-9,-10,95,95,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,-118,-119,95,95,-112,-114,-120,-121,95,-113,95,95,-116,-115,]),'PRINT':([16,29,34,39,78,79,80,81,82,83,84,85,86,87,140,141,142,147,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[-8,-9,-10,96,96,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,-118,-119,96,96,-112,-114,-120,-121,96,-113,96,96,-116,-115,]),'READ':([16,29,34,39,78,79,80,81,82,83,84,85,86,87,140,141,142,147,181,182,191,192,198,199,202,203,204,207,209,210,211,212,],[-8,-9,-10,97,97,-110,-101,-102,-103,-104,-105,-106,-107,-108,-100,-109,-111,-117,-118,-119,97,97,-112,-114,-120,-121,97,-113,97,97,-116,-115,]),'PLUSPLUS':([16,26,29,33,34,36,39,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,140,141,142,143,144,145,146,147,150,151,153,173,174,180,181,182,187,188,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-23,-9,51,-10,51,51,51,-80,-81,-82,126,51,51,51,51,-51,-79,-83,-60,-61,-62,-64,-65,-66,51,-110,-101,-102,-103,-104,-105,-106,-107,-108,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-73,-74,-75,-76,-77,-78,51,51,-54,-55,51,-100,-109,-111,51,51,51,51,-117,51,51,51,51,-63,51,-118,-119,-52,-53,51,51,51,51,-112,-114,51,-120,-121,51,51,-113,51,51,-116,-115,]),'MINUSMINUS':([16,26,29,33,34,36,39,43,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,140,141,142,143,144,145,146,147,150,151,153,173,174,180,181,182,187,188,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-23,-9,52,-10,52,52,52,-80,-81,-82,127,52,52,52,52,-51,-79,-83,-60,-61,-62,-64,-65,-66,52,-110,-101,-102,-103,-104,-105,-106,-107,-108,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-73,-74,-75,-76,-77,-78,52,52,-54,-55,52,-100,-109,-111,52,52,52,52,-117,52,52,52,52,-63,52,-118,-119,-52,-53,52,52,52,52,-112,-114,52,-120,-121,52,52,-113,52,52,-116,-115,]),'ADDRESS':([16,29,33,34,36,39,43,47,48,49,51,52,53,54,56,57,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,140,141,142,143,144,145,146,147,150,151,153,173,180,181,182,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-9,56,-10,56,56,56,-80,-81,-82,56,56,56,56,-79,-83,56,-110,-101,-102,-103,-104,-105,-106,-107,-108,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-73,-74,-75,-76,-77,-78,56,56,56,-100,-109,-111,56,56,56,56,-117,56,56,56,56,56,-118,-119,56,56,56,56,-112,-114,56,-120,-121,56,56,-113,56,56,-116,-115,]),'PLUS':([16,26,29,33,34,36,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,141,142,143,144,145,146,147,150,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,173,174,180,181,182,187,188,189,190,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-23,-9,48,-10,48,48,48,107,-45,-31,-80,-81,-82,-47,48,48,48,48,-51,-79,-83,-60,-61,-62,-64,-65,-66,107,-45,48,-110,-101,-102,-103,-104,-105,-106,-107,-108,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-73,-74,-75,-76,-77,-78,48,48,-54,-55,-48,48,-49,-50,-100,-109,-111,48,48,48,48,-117,48,48,48,-32,-33,-34,-35,-36,107,107,107,107,107,107,107,107,48,-63,48,-118,-119,-52,-53,48,-46,48,48,48,-112,-114,48,-120,-121,48,48,-113,48,48,-116,-115,]),'MINUS':([16,26,29,33,34,36,39,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,68,69,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,140,141,142,143,144,145,146,147,150,151,153,154,155,156,157,158,159,160,161,162,163,164,165,166,173,174,180,181,182,187,188,189,190,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-23,-9,49,-10,49,49,49,108,-45,-31,-80,-81,-82,-47,49,49,49,49,-51,-79,-83,-60,-61,-62,-64,-65,-66,108,-45,49,-110,-101,-102,-103,-104,-105,-106,-107,-108,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-73,-74,-75,-76,-77,-78,49,49,-54,-55,-48,49,-49,-50,-100,-109,-111,49,49,49,49,-117,49,49,49,-32,-33,-34,-35,-36,108,108,108,108,108,108,108,108,49,-63,49,-118,-119,-52,-53,49,-46,49,49,49,-112,-114,49,-120,-121,49,49,-113,49,49,-116,-115,]),'NOT':([16,29,33,34,36,39,43,47,48,49,51,52,53,54,56,57,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,140,141,142,143,144,145,146,147,150,151,153,173,180,181,182,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-9,57,-10,57,57,57,-80,-81,-82,57,57,57,57,-79,-83,57,-110,-101,-102,-103,-104,-105,-106,-107,-108,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-73,-74,-75,-76,-77,-78,57,57,57,-100,-109,-111,57,57,57,57,-117,57,57,57,57,57,-118,-119,57,57,57,57,-112,-114,57,-120,-121,57,57,-113,57,57,-116,-115,]),'STRING_LITERAL':([16,29,33,34,36,39,43,47,48,49,51,52,53,54,56,57,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,140,141,142,143,144,145,146,147,150,151,153,173,180,181,182,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-9,60,-10,60,60,60,-80,-81,-82,60,60,60,60,-79,-83,60,-110,-101,-102,-103,-104,-105,-106,-107,-108,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-73,-74,-75,-76,-77,-78,60,60,60,-100,-109,-111,60,60,60,60,-117,60,60,60,60,60,-118,-119,60,60,60,60,-112,-114,60,-120,-121,60,60,-113,60,60,-116,-115,]),'INT_CONST':([16,29,33,34,36,39,43,47,48,49,51,52,53,54,56,57,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,140,141,142,143,144,145,146,147,150,151,153,173,180,181,182,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-9,61,-10,61,61,61,-80,-81,-82,61,61,61,61,-79,-83,61,-110,-101,-102,-103,-104,-105,-106,-107,-108,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-73,-74,-75,-76,-77,-78,61,61,61,-100,-109,-111,61,61,61,61,-117,61,61,61,61,61,-118,-119,61,61,61,61,-112,-114,61,-120,-121,61,61,-113,61,61,-116,-115,]),'CHAR_CONST':([16,29,33,34,36,39,43,47,48,49,51,52,53,54,56,57,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,140,141,142,143,144,145,146,147,150,151,153,173,180,181,182,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-9,62,-10,62,62,62,-80,-81,-82,62,62,62,62,-79,-83,62,-110,-101,-102,-103,-104,-105,-106,-107,-108,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-73,-74,-75,-76,-77,-78,62,62,62,-100,-109,-111,62,62,62,62,-117,62,62,62,62,62,-118,-119,62,62,62,62,-112,-114,62,-120,-121,62,62,-113,62,62,-116,-115,]),'FLOAT_CONST':([16,29,33,34,36,39,43,47,48,49,51,52,53,54,56,57,78,79,80,81,82,83,84,85,86,87,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,140,141,142,143,144,145,146,147,150,151,153,173,180,181,182,189,191,192,193,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,-9,63,-10,63,63,63,-80,-81,-82,63,63,63,63,-79,-83,63,-110,-101,-102,-103,-104,-105,-106,-107,-108,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-73,-74,-75,-76,-77,-78,63,63,63,-100,-109,-111,63,63,63,63,-117,63,63,63,63,63,-118,-119,63,63,63,63,-112,-114,63,-120,-121,63,63,-113,63,63,-116,-115,]),'COMMA':([18,21,22,23,24,26,31,41,42,44,45,46,50,55,58,59,60,61,62,63,64,69,70,72,77,90,99,101,103,126,127,128,130,131,133,134,135,137,139,149,152,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,172,174,175,176,177,178,184,185,186,187,188,190,197,],[-91,35,-87,-15,-18,-23,-91,-92,-93,-71,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,-88,-45,136,-84,-19,144,-67,153,-96,-54,-55,-48,-49,-50,144,-20,-21,-22,-86,144,-94,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-72,144,189,-56,-63,-85,144,-68,144,189,-95,-97,-52,-53,-46,-57,]),'EQUALS':([18,23,24,26,31,45,50,55,58,59,60,61,62,63,69,77,126,127,128,130,131,134,135,137,174,187,188,190,],[33,-15,-18,-23,33,118,-47,-51,-60,-61,-62,-64,-65,-66,-45,-19,-54,-55,-48,-49,-50,-20,-21,-22,-63,-52,-53,-46,]),'LBRACKET':([23,24,26,50,55,58,59,60,61,62,63,77,126,127,134,135,137,174,187,188,],[36,-18,-23,124,-51,-60,-61,-62,-64,-65,-66,-19,-54,-55,-20,-21,-22,-63,-52,-53,]),'TIMESEQUAL':([26,45,50,55,58,59,60,61,62,63,69,126,127,128,130,131,174,187,188,190,],[-23,119,-47,-51,-60,-61,-62,-64,-65,-66,-45,-54,-55,-48,-49,-50,-63,-52,-53,-46,]),'DIVIDEEQUAL':([26,45,50,55,58,59,60,61,62,63,69,126,127,128,130,131,174,187,188,190,],[-23,120,-47,-51,-60,-61,-62,-64,-65,-66,-45,-54,-55,-48,-49,-50,-63,-52,-53,-46,]),'MODEQUAL':([26,45,50,55,58,59,60,61,62,63,69,126,127,128,130,131,174,187,188,190,],[-23,121,-47,-51,-60,-61,-62,-64,-65,-66,-45,-54,-55,-48,-49,-50,-63,-52,-53,-46,]),'PLUSEQUAL':([26,45,50,55,58,59,60,61,62,63,69,126,127,128,130,131,174,187,188,190,],[-23,122,-47,-51,-60,-61,-62,-64,-65,-66,-45,-54,-55,-48,-49,-50,-63,-52,-53,-46,]),'MINUSEQUAL':([26,45,50,55,58,59,60,61,62,63,69,126,127,128,130,131,174,187,188,190,],[-23,123,-47,-51,-60,-61,-62,-64,-65,-66,-45,-54,-55,-48,-49,-50,-63,-52,-53,-46,]),'DIVIDE':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,105,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,105,-45,-54,-55,-48,-49,-50,-32,-33,-34,105,105,105,105,105,105,105,105,105,105,-63,-52,-53,-46,]),'MOD':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,106,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,106,-45,-54,-55,-48,-49,-50,-32,-33,-34,106,106,106,106,106,106,106,106,106,106,-63,-52,-53,-46,]),'LT':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,109,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,109,-45,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,109,109,109,109,-63,-52,-53,-46,]),'LE':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,110,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,110,-45,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,110,110,110,110,-63,-52,-53,-46,]),'GT':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,111,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,111,-45,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,111,111,111,111,-63,-52,-53,-46,]),'GE':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,112,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,112,-45,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,112,112,112,112,-63,-52,-53,-46,]),'EQ':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,113,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,113,-45,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,113,113,-63,-52,-53,-46,]),'NE':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,114,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,114,-45,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,114,114,-63,-52,-53,-46,]),'AND':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,115,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,115,-45,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,115,-63,-52,-53,-46,]),'OR':([26,44,45,46,50,55,58,59,60,61,62,63,68,69,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,174,187,188,190,],[-23,116,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,116,-45,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-63,-52,-53,-46,]),'RBRACKET':([26,36,44,45,46,50,55,58,59,60,61,62,63,65,66,67,68,69,99,126,127,128,130,131,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,174,177,187,188,190,],[-23,-122,-71,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,134,-29,-30,-28,-45,-67,-54,-55,-48,-49,-50,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-72,187,-63,-68,-52,-53,-46,]),'RBRACE':([26,42,43,44,45,46,50,55,58,59,60,61,62,63,69,78,79,80,81,82,83,84,85,86,87,100,101,102,103,126,127,128,130,131,140,141,142,147,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,174,181,182,185,186,187,188,190,198,199,202,203,207,211,212,],[-23,-93,-122,-71,-45,-31,-47,-51,-60,-61,-62,-64,-65,-66,-45,140,-110,-101,-102,-103,-104,-105,-106,-107,-108,152,-99,-98,-96,-54,-55,-48,-49,-50,-100,-109,-111,-117,-94,185,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-72,-63,-118,-119,-95,-97,-52,-53,-46,-112,-114,-120,-121,-113,-116,-115,]),'ELSE':([80,81,82,83,84,85,86,87,140,142,147,181,182,198,199,202,203,207,211,212,],[-101,-102,-103,-104,-105,-106,-107,-108,-100,-111,-117,-118,-119,204,-114,-120,-121,-113,-116,-115,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,14,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,6,15,18,30,32,39,146,],[5,5,16,29,16,16,29,29,180,]),'declarator':([0,2,7,17,25,35,75,],[6,6,18,31,38,31,139,]),'type_specifier':([0,2,6,15,18,30,32,37,39,54,136,146,],[7,7,17,17,17,17,17,75,17,132,75,17,]),'pointer':([0,2,7,13,17,25,35,75,],[8,8,8,27,8,8,8,8,]),'declaration_list':([6,18,30,],[15,32,39,]),'init_declarator_list_opt':([7,17,],[19,19,]),'empty':([7,17,36,37,39,43,78,94,125,146,150,180,191,192,193,201,204,205,209,210,],[20,20,66,74,98,102,98,98,170,98,98,98,98,98,98,98,98,98,98,98,]),'init_declarator_list':([7,17,],[21,21,]),'init_declarator':([7,17,35,],[22,22,64,]),'direct_declarator':([8,],[23,]),'identifier':([8,33,36,37,39,43,51,52,53,54,73,78,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,129,143,144,145,146,150,151,153,173,180,189,191,192,193,201,204,205,209,210,],[24,58,58,76,58,58,58,58,58,58,138,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'compound_statement':([15,32,39,78,191,192,204,209,210,],[28,40,81,81,81,81,81,81,81,]),'initializer':([33,43,153,],[41,103,186,]),'assignment_expression':([33,39,43,54,78,94,95,117,124,125,129,143,144,145,146,150,151,153,180,189,191,192,193,201,204,205,209,210,],[42,99,42,99,99,99,99,167,99,172,99,99,177,99,99,99,172,42,99,197,99,99,99,99,99,99,99,99,]),'binary_expression':([33,36,39,43,54,78,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,129,143,144,145,146,150,151,153,180,189,191,192,193,201,204,205,209,210,],[44,68,44,44,44,44,44,44,154,155,156,157,158,159,160,161,162,163,164,165,166,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'unary_expression':([33,36,39,43,51,52,53,54,78,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,129,143,144,145,146,150,151,153,173,180,189,191,192,193,201,204,205,209,210,],[45,69,45,45,128,130,69,45,45,45,45,69,69,69,69,69,69,69,69,69,69,69,69,69,45,45,45,45,45,45,45,45,45,45,45,69,45,45,45,45,45,45,45,45,45,45,]),'cast_expression':([33,36,39,43,53,54,78,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,129,143,144,145,146,150,151,153,173,180,189,191,192,193,201,204,205,209,210,],[46,46,46,46,131,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,190,46,46,46,46,46,46,46,46,46,46,]),'postfix_expression':([33,36,39,43,51,52,53,54,78,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,129,143,144,145,146,150,151,153,173,180,189,191,192,193,201,204,205,209,210,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'unary_operator':([33,36,39,43,51,52,53,54,78,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,129,143,144,145,146,150,151,153,173,180,189,191,192,193,201,204,205,209,210,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'primary_expression':([33,36,39,43,51,52,53,54,78,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,129,143,144,145,146,150,151,153,173,180,189,191,192,193,201,204,205,209,210,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'constant':([33,36,39,43,51,52,53,54,78,94,95,104,105,106,107,108,109,110,111,112,113,114,115,116,117,124,125,129,143,144,145,146,150,151,153,173,180,189,191,192,193,201,204,205,209,210,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'constant_expression_opt':([36,],[65,]),'constant_expression':([36,],[67,]),'parameter_list':([37,],[70,]),'identifier_list_opt':([37,],[71,]),'parameter_declaration':([37,136,],[72,175,]),'identifier_list':([37,],[73,]),'statement_list':([39,],[78,]),'statement':([39,78,191,192,204,209,210,],[79,141,198,199,207,211,212,]),'expression_statement':([39,78,191,192,204,209,210,],[80,80,80,80,80,80,80,]),'selection_statement':([39,78,191,192,204,209,210,],[82,82,82,82,82,82,82,]),'iteration_statement':([39,78,191,192,204,209,210,],[83,83,83,83,83,83,83,]),'jump_statement':([39,78,191,192,204,209,210,],[84,84,84,84,84,84,84,]),'assert_statement':([39,78,191,192,204,209,210,],[85,85,85,85,85,85,85,]),'print_statement':([39,78,191,192,204,209,210,],[86,86,86,86,86,86,86,]),'read_statement':([39,78,191,192,204,209,210,],[87,87,87,87,87,87,87,]),'expression_opt':([39,78,94,146,150,180,191,192,193,201,204,205,209,210,],[88,88,148,179,183,194,88,88,200,206,88,208,88,88,]),'expression':([39,54,78,94,95,124,129,143,145,146,150,180,191,192,193,201,204,205,209,210,],[90,133,90,90,149,168,133,176,178,90,90,90,90,90,90,90,90,90,90,90,]),'initializer_list_opt':([43,],[100,]),'initializer_list':([43,],[101,]),'assignment_operator':([45,],[117,]),'argument_expression_opt':([125,],[169,]),'argument_expression':([125,151,],[171,184,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',30),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',38),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',39),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','uc_parser.py',49),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','uc_parser.py',50),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','uc_parser.py',57),
  ('function_definition -> type_specifier declarator declaration_list compound_statement','function_definition',4,'p_function_definition','uc_parser.py',58),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',65),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',66),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','uc_parser.py',76),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',83),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',84),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',85),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',86),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','uc_parser.py',93),
  ('pointer -> TIMES','pointer',1,'p_pointer','uc_parser.py',100),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','uc_parser.py',101),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator','uc_parser.py',108),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator','uc_parser.py',109),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator','uc_parser.py',110),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator','uc_parser.py',111),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator','uc_parser.py',112),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',119),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',126),
  ('identifier_list -> identifier_list identifier','identifier_list',2,'p_identifier_list','uc_parser.py',127),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',137),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','uc_parser.py',138),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',145),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',152),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',153),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',161),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',162),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',163),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',164),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',165),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',166),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',167),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',168),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',169),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',170),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',171),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',172),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',173),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',174),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','uc_parser.py',184),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','uc_parser.py',185),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','uc_parser.py',195),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression','uc_parser.py',196),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression','uc_parser.py',197),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','uc_parser.py',198),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','uc_parser.py',205),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression','uc_parser.py',206),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression','uc_parser.py',207),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression','uc_parser.py',208),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression','uc_parser.py',209),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',216),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',217),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',224),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',225),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression','uc_parser.py',235),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','uc_parser.py',236),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','uc_parser.py',237),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','uc_parser.py',238),
  ('constant -> INT_CONST','constant',1,'p_constant','uc_parser.py',248),
  ('constant -> CHAR_CONST','constant',1,'p_constant','uc_parser.py',249),
  ('constant -> FLOAT_CONST','constant',1,'p_constant','uc_parser.py',250),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser.py',257),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser.py',258),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',265),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',266),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',276),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',277),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',284),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',285),
  ('assignment_operator -> DIVIDEEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',286),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',287),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',288),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',289),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser.py',299),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',300),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',301),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',302),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',303),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',310),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',311),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',318),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',325),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',326),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',336),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',337),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',347),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',348),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','uc_parser.py',358),
  ('initializer -> LBRACE initializer_list_opt RBRACE','initializer',3,'p_initializer','uc_parser.py',359),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','uc_parser.py',360),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',367),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',368),
  ('initializer_list_opt -> empty','initializer_list_opt',1,'p_initializer_list_opt','uc_parser.py',375),
  ('initializer_list_opt -> initializer_list','initializer_list_opt',1,'p_initializer_list_opt','uc_parser.py',376),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement','uc_parser.py',383),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',390),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',391),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',392),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',393),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',394),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',395),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',396),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',397),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','uc_parser.py',404),
  ('statement_list -> statement','statement_list',1,'p_statement_list','uc_parser.py',405),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',415),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','uc_parser.py',422),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','uc_parser.py',423),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','uc_parser.py',430),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','uc_parser.py',431),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','uc_parser.py',432),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','uc_parser.py',442),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','uc_parser.py',443),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',453),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',460),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',467),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',481),
]
