
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQNEleftGTGELTLEleftPLUSMINUSPLUSPLUSMINUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT BREAK CHAR CHAR_CONST COMMA DIVIDE DIVIDEEQUAL ELSE EQ EQUALS FLOAT FLOAT_CONST FOR GE GT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSEQUAL MINUSMINUS MOD MODEQUAL NE NOT OR PLUS PLUSEQUAL PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING_LITERAL TIMES TIMESEQUAL VOID WHILE\n            program : global_declaration_list\n        \n            global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n        \n            global_declaration : function_definition\n        \n            global_declaration : declaration\n        \n            function_definition : type_specifier declarator declaration_list compound_statement\n        \n            function_definition : declarator declaration_list compound_statement\n        \n            declaration_list : declaration\n                             | declaration_list declaration\n        \n            declaration :  type_specifier init_declarator_list_opt SEMI\n        \n            type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n        \n            declarator : direct_declarator\n        \n            declarator : pointer direct_declarator\n        \n            pointer : TIMES\n                    | TIMES pointer\n        \n            direct_declarator : identifier\n        \n            direct_declarator : LPAREN declarator RPAREN\n        \n            direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET\n        \n            direct_declarator : direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier_list RPAREN\n        \n            identifier : ID\n        \n            identifier_list : identifier\n                            | identifier_list COMMA identifier\n        \n            constant_expression : binary_expression\n        \n            constant_expression_opt : empty\n                                    | constant_expression\n        \n            binary_expression : cast_expression\n                              | binary_expression  TIMES   binary_expression\n                              | binary_expression  DIVIDE  binary_expression\n                              | binary_expression  MOD     binary_expression\n                              | binary_expression  PLUS    binary_expression\n                              | binary_expression  MINUS   binary_expression\n                              | binary_expression  LT      binary_expression\n                              | binary_expression  LE      binary_expression\n                              | binary_expression  GT      binary_expression\n                              | binary_expression  GE      binary_expression\n                              | binary_expression  EQ      binary_expression\n                              | binary_expression  NE      binary_expression\n                              | binary_expression  AND     binary_expression\n                              | binary_expression  OR      binary_expression\n        \n            cast_expression : unary_expression\n        \n            cast_expression : LPAREN type_specifier RPAREN cast_expression\n        \n            unary_expression : postfix_expression\n        \n            unary_expression : PLUSPLUS unary_expression\n                             | MINUSMINUS unary_expression\n                             | unary_operator cast_expression\n        \n            postfix_expression : primary_expression\n        \n            postfix_expression : postfix_expression LBRACKET expression RBRACKET\n        \n            postfix_expression : postfix_expression LPAREN argument_expression_opt RPAREN\n        \n            postfix_expression : postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n        \n            argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n        \n            argument_expression_opt : empty\n                                    | argument_expression\n        \n            primary_expression : identifier\n                               | constant\n                               | STRING_LITERAL\n                               | LPAREN expression RPAREN\n        \n            constant : INT_CONST\n                     | CHAR_CONST\n                     | FLOAT_CONST\n        \n            expression : assignment_expression\n                       | expression COMMA assignment_expression\n        \n            expression_opt : empty\n                           | expression\n        \n            assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n        \n            assignment_operator : EQUALS\n                                | TIMESEQUAL\n                                | DIVIDEEQUAL\n                                | MODEQUAL\n                                | PLUSEQUAL\n                                | MINUSEQUAL\n        \n            unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n        \n            parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n        \n            parameter_declaration : type_specifier declarator\n        \n            init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n        \n            init_declarator_list_opt : empty\n                                     | init_declarator_list\n        \n            init_declarator : declarator\n                            | declarator EQUALS initializer\n        \n            initializer : assignment_expression\n                        | LBRACE initializer_list_opt RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n        \n            initializer_list : initializer\n                             | initializer_list COMMA initializer\n        \n            initializer_list_opt : empty\n                                 | initializer_list\n        \n            compound_statement : LBRACE declaration_list statement_list RBRACE\n        \n            statement : expression_statement\n                      | compound_statement\n                      | selection_statement\n                      | iteration_statement\n                      | jump_statement\n                      | assert_statement\n                      | print_statement\n                      | read_statement\n        \n            statement_list : statement_list statement\n                           | statement\n        \n            expression_statement : expression_opt SEMI\n        \n            selection_statement : IF LPAREN expression RPAREN statement\n                                | IF LPAREN expression RPAREN statement ELSE statement\n        \n            iteration_statement : WHILE LPAREN expression RPAREN statement\n                                | FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n                                | FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n        \n            jump_statement : BREAK SEMI\n                           | RETURN expression_opt SEMI\n        \n            assert_statement : ASSERT expression SEMI\n        \n            print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n        \n            read_statement : READ LPAREN argument_expression RPAREN SEMI\n        \n            empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,7,12,14,17,18,19,24,25,28,29,32,34,36,37,38,49,68,69,76,77,102,103,104,165,170,],[8,8,-2,-4,-5,8,-15,-19,-24,-3,8,8,-8,8,-16,8,-10,-7,-9,8,8,-20,-6,8,-21,-22,8,-23,-99,8,]),'CHAR':([0,2,3,4,5,7,12,14,17,18,19,24,25,28,29,32,34,36,37,38,49,68,69,76,77,102,103,104,165,170,],[9,9,-2,-4,-5,9,-15,-19,-24,-3,9,9,-8,9,-16,9,-10,-7,-9,9,9,-20,-6,9,-21,-22,9,-23,-99,9,]),'INT':([0,2,3,4,5,7,12,14,17,18,19,24,25,28,29,32,34,36,37,38,49,68,69,76,77,102,103,104,165,170,],[10,10,-2,-4,-5,10,-15,-19,-24,-3,10,10,-8,10,-16,10,-10,-7,-9,10,10,-20,-6,10,-21,-22,10,-23,-99,10,]),'FLOAT':([0,2,3,4,5,7,12,14,17,18,19,24,25,28,29,32,34,36,37,38,49,68,69,76,77,102,103,104,165,170,],[11,11,-2,-4,-5,11,-15,-19,-24,-3,11,11,-8,11,-16,11,-10,-7,-9,11,11,-20,-6,11,-21,-22,11,-23,-99,11,]),'LPAREN':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,25,26,27,29,31,33,34,35,36,37,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,68,69,72,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,96,97,99,102,104,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,131,132,134,135,136,137,152,153,154,163,165,166,167,168,169,170,171,174,175,178,179,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[15,15,-2,-4,-5,15,-11,-12,-13,-14,28,15,-19,15,-17,-24,-3,-8,15,49,28,-18,49,-10,15,-7,-9,-79,-80,-81,49,95,99,99,49,-50,-78,-82,-59,-60,-61,-63,-64,-65,15,-20,-6,49,49,-21,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-53,-54,49,-22,-23,49,-72,-73,-74,-75,-76,-77,49,-109,-100,-101,-102,-103,-104,-105,-106,-107,168,169,170,49,49,174,175,49,-62,49,49,-99,-108,-110,49,49,49,-116,49,49,-51,-52,49,49,-117,-118,49,49,49,-111,-113,49,-119,-120,49,49,-112,49,49,-115,-114,]),'TIMES':([0,2,3,4,5,6,8,9,10,11,15,16,17,18,25,26,27,33,34,35,36,37,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,67,69,72,73,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,96,97,98,99,100,101,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,163,165,166,167,168,169,170,171,174,175,176,178,179,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[16,16,-2,-4,-5,16,-11,-12,-13,-14,16,16,-24,-3,-8,16,45,45,-10,16,-7,-9,78,-30,-79,-80,-81,-44,45,-46,45,45,45,-50,-78,-82,-59,-60,-61,-63,-64,-65,16,-6,45,78,-44,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-53,-54,-47,45,-48,-49,45,-72,-73,-74,-75,-76,-77,45,-109,-100,-101,-102,-103,-104,-105,-106,-107,45,45,-31,-32,-33,78,78,78,78,78,78,78,78,78,78,45,-62,45,45,-99,-108,-110,45,45,45,-116,45,45,-45,-51,-52,45,45,-117,-118,45,45,45,-111,-113,45,-119,-120,45,45,-112,45,45,-115,-114,]),'ID':([0,2,3,4,5,6,8,9,10,11,13,15,16,18,25,26,27,28,31,33,34,35,36,37,45,46,47,49,51,52,53,55,56,67,69,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,105,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,154,163,165,166,167,168,169,170,171,174,175,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[17,17,-2,-4,-5,17,-11,-12,-13,-14,17,17,-17,-3,-8,17,17,17,-18,17,-10,17,-7,-9,-79,-80,-81,17,17,17,17,-78,-82,17,-6,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,-72,-73,-74,-75,-76,-77,17,-109,-100,-101,-102,-103,-104,-105,-106,-107,17,17,17,17,17,-99,-108,-110,17,17,17,-116,17,17,17,17,-117,-118,17,17,17,-111,-113,17,-119,-120,17,17,-112,17,17,-115,-114,]),'$end':([1,2,3,4,5,18,34,36,69,165,],[0,-1,-2,-4,-5,-3,-10,-7,-6,-99,]),'SEMI':([6,8,9,10,11,12,14,17,19,20,21,22,23,25,26,29,34,37,39,44,48,50,54,57,58,59,60,61,62,68,70,71,73,74,75,76,77,93,96,97,98,100,101,102,104,118,119,120,121,122,123,124,125,126,127,128,130,133,134,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,162,164,165,166,167,170,171,172,173,176,177,178,179,181,185,186,187,188,192,193,194,195,196,197,198,199,200,202,203,204,207,209,210,211,212,],[-121,-11,-12,-13,-14,-15,-19,-24,-90,34,-88,-89,-86,-8,-121,-16,-10,-9,-90,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,-20,-91,-92,-70,-44,-87,-121,-21,-66,-53,-54,-47,-48,-49,-22,-23,-121,-109,-100,-101,-102,-103,-104,-105,-106,-107,167,-69,171,-121,-68,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-62,-93,-71,-99,-108,-110,-121,-116,187,188,-45,-67,-51,-52,-94,194,-121,-117,-118,-121,-121,-121,201,202,203,-111,-113,205,-119,-120,-121,-112,-121,-121,-115,-114,]),'RPAREN':([8,9,10,11,12,14,17,29,30,44,48,50,54,57,58,59,60,61,62,63,64,65,66,68,73,74,77,91,92,93,95,96,97,98,100,101,102,104,106,130,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,156,157,158,159,160,161,164,174,176,177,178,179,183,184,189,190,191,201,205,206,208,],[-11,-12,-13,-14,-15,-19,-24,-16,68,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,102,104,-83,-25,-20,-70,-44,-21,152,153,-66,-121,-53,-54,-47,-48,-49,-22,-23,-85,-69,-68,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-62,179,-57,-58,-55,-84,-26,-71,-121,-45,-67,-51,-52,192,193,196,197,-56,-121,-121,209,210,]),'EQUALS':([12,14,17,19,29,39,48,50,54,57,58,59,60,61,62,68,74,77,96,97,98,100,101,102,104,153,176,178,179,],[-15,-19,-24,33,-16,33,-44,-46,-50,-59,-60,-61,-63,-64,-65,-20,112,-21,-53,-54,-47,-48,-49,-22,-23,-62,-45,-51,-52,]),'COMMA':([12,14,17,19,22,23,29,39,44,48,50,54,57,58,59,60,61,62,63,64,65,66,68,70,71,73,74,75,77,92,93,96,97,98,100,101,102,104,106,108,110,130,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,158,159,160,161,162,164,173,176,177,178,179,181,182,183,184,190,191,],[-15,-19,-24,-90,35,-86,-16,-90,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,103,105,-83,-25,-20,-91,-92,-70,-44,-87,-21,154,-66,-53,-54,-47,-48,-49,-22,-23,-85,163,-95,154,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-62,154,180,-55,-84,-26,-93,-71,154,-45,-67,-51,-52,-94,-96,154,154,180,-56,]),'LBRACKET':([12,14,17,29,50,54,57,58,59,60,61,62,68,77,96,97,102,104,153,178,179,],[27,-19,-24,27,94,-50,-59,-60,-61,-63,-64,-65,-20,-21,-53,-54,-22,-23,-62,-51,-52,]),'PLUSPLUS':([17,25,27,33,34,37,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,96,97,99,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,153,154,163,165,166,167,168,169,170,171,174,175,178,179,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-24,-8,51,51,-10,-9,-79,-80,-81,51,96,51,51,51,-50,-78,-82,-59,-60,-61,-63,-64,-65,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-53,-54,51,51,-72,-73,-74,-75,-76,-77,51,-109,-100,-101,-102,-103,-104,-105,-106,-107,51,51,51,-62,51,51,-99,-108,-110,51,51,51,-116,51,51,-51,-52,51,51,-117,-118,51,51,51,-111,-113,51,-119,-120,51,51,-112,51,51,-115,-114,]),'MINUSMINUS':([17,25,27,33,34,37,45,46,47,49,50,51,52,53,54,55,56,57,58,59,60,61,62,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,96,97,99,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,153,154,163,165,166,167,168,169,170,171,174,175,178,179,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-24,-8,52,52,-10,-9,-79,-80,-81,52,97,52,52,52,-50,-78,-82,-59,-60,-61,-63,-64,-65,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-53,-54,52,52,-72,-73,-74,-75,-76,-77,52,-109,-100,-101,-102,-103,-104,-105,-106,-107,52,52,52,-62,52,52,-99,-108,-110,52,52,52,-116,52,52,-51,-52,52,52,-117,-118,52,52,52,-111,-113,52,-119,-120,52,52,-112,52,52,-115,-114,]),'DIVIDE':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,79,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,79,-44,-53,-54,-47,-48,-49,-31,-32,-33,79,79,79,79,79,79,79,79,79,79,-62,-45,-51,-52,]),'MOD':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,80,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,80,-44,-53,-54,-47,-48,-49,-31,-32,-33,80,80,80,80,80,80,80,80,80,80,-62,-45,-51,-52,]),'PLUS':([17,25,27,33,34,37,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,72,73,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,96,97,98,99,100,101,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,163,165,166,167,168,169,170,171,174,175,176,178,179,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-24,-8,46,46,-10,-9,81,-30,-79,-80,-81,-44,46,-46,46,46,46,-50,-78,-82,-59,-60,-61,-63,-64,-65,46,81,-44,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-53,-54,-47,46,-48,-49,46,-72,-73,-74,-75,-76,-77,46,-109,-100,-101,-102,-103,-104,-105,-106,-107,46,46,-31,-32,-33,-34,-35,81,81,81,81,81,81,81,81,46,-62,46,46,-99,-108,-110,46,46,46,-116,46,46,-45,-51,-52,46,46,-117,-118,46,46,46,-111,-113,46,-119,-120,46,46,-112,46,46,-115,-114,]),'MINUS':([17,25,27,33,34,37,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,72,73,74,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,96,97,98,99,100,101,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,163,165,166,167,168,169,170,171,174,175,176,178,179,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-24,-8,47,47,-10,-9,82,-30,-79,-80,-81,-44,47,-46,47,47,47,-50,-78,-82,-59,-60,-61,-63,-64,-65,47,82,-44,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,-53,-54,-47,47,-48,-49,47,-72,-73,-74,-75,-76,-77,47,-109,-100,-101,-102,-103,-104,-105,-106,-107,47,47,-31,-32,-33,-34,-35,82,82,82,82,82,82,82,82,47,-62,47,47,-99,-108,-110,47,47,47,-116,47,47,-45,-51,-52,47,47,-117,-118,47,47,47,-111,-113,47,-119,-120,47,47,-112,47,47,-115,-114,]),'LT':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,83,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,83,-44,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,83,83,83,83,-62,-45,-51,-52,]),'LE':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,84,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,84,-44,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,84,84,84,84,-62,-45,-51,-52,]),'GT':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,85,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,85,-44,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,85,85,85,85,-62,-45,-51,-52,]),'GE':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,86,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,86,-44,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,86,86,86,86,-62,-45,-51,-52,]),'EQ':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,87,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,87,-44,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,87,87,-62,-45,-51,-52,]),'NE':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,88,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,88,-44,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,88,88,-62,-45,-51,-52,]),'AND':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,89,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,89,-44,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,89,-62,-45,-51,-52,]),'OR':([17,43,44,48,50,54,57,58,59,60,61,62,73,74,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,176,178,179,],[-24,90,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,90,-44,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-62,-45,-51,-52,]),'RBRACKET':([17,27,40,41,42,43,44,48,50,54,57,58,59,60,61,62,73,74,93,96,97,98,100,101,139,140,141,142,143,144,145,146,147,148,149,150,151,153,155,164,176,177,178,179,],[-24,-121,77,-28,-29,-27,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,-70,-44,-66,-53,-54,-47,-48,-49,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-62,178,-71,-45,-67,-51,-52,]),'TIMESEQUAL':([17,48,50,54,57,58,59,60,61,62,74,96,97,98,100,101,153,176,178,179,],[-24,-44,-46,-50,-59,-60,-61,-63,-64,-65,113,-53,-54,-47,-48,-49,-62,-45,-51,-52,]),'DIVIDEEQUAL':([17,48,50,54,57,58,59,60,61,62,74,96,97,98,100,101,153,176,178,179,],[-24,-44,-46,-50,-59,-60,-61,-63,-64,-65,114,-53,-54,-47,-48,-49,-62,-45,-51,-52,]),'MODEQUAL':([17,48,50,54,57,58,59,60,61,62,74,96,97,98,100,101,153,176,178,179,],[-24,-44,-46,-50,-59,-60,-61,-63,-64,-65,115,-53,-54,-47,-48,-49,-62,-45,-51,-52,]),'PLUSEQUAL':([17,48,50,54,57,58,59,60,61,62,74,96,97,98,100,101,153,176,178,179,],[-24,-44,-46,-50,-59,-60,-61,-63,-64,-65,116,-53,-54,-47,-48,-49,-62,-45,-51,-52,]),'MINUSEQUAL':([17,48,50,54,57,58,59,60,61,62,74,96,97,98,100,101,153,176,178,179,],[-24,-44,-46,-50,-59,-60,-61,-63,-64,-65,117,-53,-54,-47,-48,-49,-62,-45,-51,-52,]),'RBRACE':([17,44,48,50,54,57,58,59,60,61,62,71,72,73,74,96,97,98,100,101,107,108,109,110,118,119,120,121,122,123,124,125,126,127,139,140,141,142,143,144,145,146,147,148,149,150,151,153,162,163,164,165,166,167,171,176,178,179,181,182,187,188,198,199,202,203,207,211,212,],[-24,-30,-44,-46,-50,-59,-60,-61,-63,-64,-65,-92,-121,-70,-44,-53,-54,-47,-48,-49,162,-98,-97,-95,165,-109,-100,-101,-102,-103,-104,-105,-106,-107,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-62,-93,181,-71,-99,-108,-110,-116,-45,-51,-52,-94,-96,-117,-118,-111,-113,-119,-120,-112,-115,-114,]),'LBRACE':([24,25,32,33,34,37,72,76,118,119,120,121,122,123,124,125,126,127,163,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[38,-8,38,72,-10,-9,72,38,38,-109,-100,-101,-102,-103,-104,-105,-106,-107,72,-99,-108,-110,-116,-117,-118,38,38,-111,-113,-119,-120,38,-112,38,38,-115,-114,]),'IF':([25,34,37,76,118,119,120,121,122,123,124,125,126,127,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[-8,-10,-9,129,129,-109,-100,-101,-102,-103,-104,-105,-106,-107,-99,-108,-110,-116,-117,-118,129,129,-111,-113,-119,-120,129,-112,129,129,-115,-114,]),'WHILE':([25,34,37,76,118,119,120,121,122,123,124,125,126,127,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[-8,-10,-9,131,131,-109,-100,-101,-102,-103,-104,-105,-106,-107,-99,-108,-110,-116,-117,-118,131,131,-111,-113,-119,-120,131,-112,131,131,-115,-114,]),'FOR':([25,34,37,76,118,119,120,121,122,123,124,125,126,127,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[-8,-10,-9,132,132,-109,-100,-101,-102,-103,-104,-105,-106,-107,-99,-108,-110,-116,-117,-118,132,132,-111,-113,-119,-120,132,-112,132,132,-115,-114,]),'BREAK':([25,34,37,76,118,119,120,121,122,123,124,125,126,127,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[-8,-10,-9,133,133,-109,-100,-101,-102,-103,-104,-105,-106,-107,-99,-108,-110,-116,-117,-118,133,133,-111,-113,-119,-120,133,-112,133,133,-115,-114,]),'RETURN':([25,34,37,76,118,119,120,121,122,123,124,125,126,127,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[-8,-10,-9,134,134,-109,-100,-101,-102,-103,-104,-105,-106,-107,-99,-108,-110,-116,-117,-118,134,134,-111,-113,-119,-120,134,-112,134,134,-115,-114,]),'ASSERT':([25,34,37,76,118,119,120,121,122,123,124,125,126,127,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[-8,-10,-9,135,135,-109,-100,-101,-102,-103,-104,-105,-106,-107,-99,-108,-110,-116,-117,-118,135,135,-111,-113,-119,-120,135,-112,135,135,-115,-114,]),'PRINT':([25,34,37,76,118,119,120,121,122,123,124,125,126,127,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[-8,-10,-9,136,136,-109,-100,-101,-102,-103,-104,-105,-106,-107,-99,-108,-110,-116,-117,-118,136,136,-111,-113,-119,-120,136,-112,136,136,-115,-114,]),'READ':([25,34,37,76,118,119,120,121,122,123,124,125,126,127,165,166,167,171,187,188,192,193,198,199,202,203,204,207,209,210,211,212,],[-8,-10,-9,137,137,-109,-100,-101,-102,-103,-104,-105,-106,-107,-99,-108,-110,-116,-117,-118,137,137,-111,-113,-119,-120,137,-112,137,137,-115,-114,]),'ADDRESS':([25,27,33,34,37,45,46,47,49,51,52,53,55,56,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,154,163,165,166,167,168,169,170,171,174,175,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,55,55,-10,-9,-79,-80,-81,55,55,55,55,-78,-82,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-72,-73,-74,-75,-76,-77,55,-109,-100,-101,-102,-103,-104,-105,-106,-107,55,55,55,55,55,-99,-108,-110,55,55,55,-116,55,55,55,55,-117,-118,55,55,55,-111,-113,55,-119,-120,55,55,-112,55,55,-115,-114,]),'NOT':([25,27,33,34,37,45,46,47,49,51,52,53,55,56,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,154,163,165,166,167,168,169,170,171,174,175,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,56,56,-10,-9,-79,-80,-81,56,56,56,56,-78,-82,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-72,-73,-74,-75,-76,-77,56,-109,-100,-101,-102,-103,-104,-105,-106,-107,56,56,56,56,56,-99,-108,-110,56,56,56,-116,56,56,56,56,-117,-118,56,56,56,-111,-113,56,-119,-120,56,56,-112,56,56,-115,-114,]),'STRING_LITERAL':([25,27,33,34,37,45,46,47,49,51,52,53,55,56,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,154,163,165,166,167,168,169,170,171,174,175,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,59,59,-10,-9,-79,-80,-81,59,59,59,59,-78,-82,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-72,-73,-74,-75,-76,-77,59,-109,-100,-101,-102,-103,-104,-105,-106,-107,59,59,59,59,59,-99,-108,-110,59,59,59,-116,59,59,59,59,-117,-118,59,59,59,-111,-113,59,-119,-120,59,59,-112,59,59,-115,-114,]),'INT_CONST':([25,27,33,34,37,45,46,47,49,51,52,53,55,56,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,154,163,165,166,167,168,169,170,171,174,175,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,60,60,-10,-9,-79,-80,-81,60,60,60,60,-78,-82,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-72,-73,-74,-75,-76,-77,60,-109,-100,-101,-102,-103,-104,-105,-106,-107,60,60,60,60,60,-99,-108,-110,60,60,60,-116,60,60,60,60,-117,-118,60,60,60,-111,-113,60,-119,-120,60,60,-112,60,60,-115,-114,]),'CHAR_CONST':([25,27,33,34,37,45,46,47,49,51,52,53,55,56,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,154,163,165,166,167,168,169,170,171,174,175,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,61,61,-10,-9,-79,-80,-81,61,61,61,61,-78,-82,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-72,-73,-74,-75,-76,-77,61,-109,-100,-101,-102,-103,-104,-105,-106,-107,61,61,61,61,61,-99,-108,-110,61,61,61,-116,61,61,61,61,-117,-118,61,61,61,-111,-113,61,-119,-120,61,61,-112,61,61,-115,-114,]),'FLOAT_CONST':([25,27,33,34,37,45,46,47,49,51,52,53,55,56,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,134,135,152,154,163,165,166,167,168,169,170,171,174,175,180,186,187,188,192,193,194,198,199,201,202,203,204,205,207,209,210,211,212,],[-8,62,62,-10,-9,-79,-80,-81,62,62,62,62,-78,-82,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-72,-73,-74,-75,-76,-77,62,-109,-100,-101,-102,-103,-104,-105,-106,-107,62,62,62,62,62,-99,-108,-110,62,62,62,-116,62,62,62,62,-117,-118,62,62,62,-111,-113,62,-119,-120,62,62,-112,62,62,-115,-114,]),'ELSE':([120,121,122,123,124,125,126,127,165,167,171,187,188,198,199,202,203,207,211,212,],[-100,-101,-102,-103,-104,-105,-106,-107,-99,-110,-116,-117,-118,204,-113,-119,-120,-112,-115,-114,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,18,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,7,19,24,32,38,76,170,],[5,5,25,25,37,37,25,37,186,]),'type_specifier':([0,2,7,19,24,28,32,38,49,76,103,170,],[6,6,26,26,26,67,26,26,91,26,67,26,]),'declarator':([0,2,6,15,26,35,67,],[7,7,19,30,39,39,106,]),'direct_declarator':([0,2,6,13,15,26,35,67,],[12,12,12,29,12,12,12,12,]),'pointer':([0,2,6,15,16,26,35,67,],[13,13,13,13,31,13,13,13,]),'identifier':([0,2,6,13,15,26,27,28,33,35,49,51,52,53,67,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,105,111,118,134,135,152,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[14,14,14,14,14,14,57,66,57,14,57,57,57,57,14,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,161,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'init_declarator_list_opt':([6,26,],[20,20,]),'empty':([6,26,27,72,76,95,118,134,170,174,186,192,193,194,201,204,205,209,210,],[21,21,41,109,138,157,138,138,138,138,138,138,138,138,138,138,138,138,138,]),'init_declarator_list':([6,26,],[22,22,]),'init_declarator':([6,26,35,],[23,23,75,]),'declaration_list':([7,19,38,],[24,32,76,]),'compound_statement':([24,32,76,118,192,193,204,209,210,],[36,69,121,121,121,121,121,121,121,]),'constant_expression_opt':([27,],[40,]),'constant_expression':([27,],[42,]),'binary_expression':([27,33,49,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,118,134,135,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[43,73,73,73,73,139,140,141,142,143,144,145,146,147,148,149,150,151,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,]),'cast_expression':([27,33,49,53,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,118,134,135,152,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[44,44,44,101,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,176,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'unary_expression':([27,33,49,51,52,53,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,118,134,135,152,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[48,74,74,98,100,48,74,74,48,48,48,48,48,48,48,48,48,48,48,48,48,74,74,74,74,74,74,74,48,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'postfix_expression':([27,33,49,51,52,53,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,118,134,135,152,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'unary_operator':([27,33,49,51,52,53,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,118,134,135,152,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'primary_expression':([27,33,49,51,52,53,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,118,134,135,152,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'constant':([27,33,49,51,52,53,72,76,78,79,80,81,82,83,84,85,86,87,88,89,90,94,95,99,111,118,134,135,152,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'parameter_list':([28,],[63,]),'identifier_list':([28,],[64,]),'parameter_declaration':([28,103,],[65,160,]),'initializer':([33,72,163,],[70,110,182,]),'assignment_expression':([33,49,72,76,94,95,99,111,118,134,135,154,163,168,169,170,174,175,180,186,192,193,194,201,204,205,209,210,],[71,93,71,93,93,159,93,164,93,93,93,177,71,93,93,93,93,159,191,93,93,93,93,93,93,93,93,93,]),'expression':([49,76,94,99,118,134,135,168,169,170,174,186,192,193,194,201,204,205,209,210,],[92,130,155,92,130,130,173,183,184,130,130,130,130,130,130,130,130,130,130,130,]),'initializer_list_opt':([72,],[107,]),'initializer_list':([72,],[108,]),'assignment_operator':([74,],[111,]),'statement_list':([76,],[118,]),'statement':([76,118,192,193,204,209,210,],[119,166,198,199,207,211,212,]),'expression_statement':([76,118,192,193,204,209,210,],[120,120,120,120,120,120,120,]),'selection_statement':([76,118,192,193,204,209,210,],[122,122,122,122,122,122,122,]),'iteration_statement':([76,118,192,193,204,209,210,],[123,123,123,123,123,123,123,]),'jump_statement':([76,118,192,193,204,209,210,],[124,124,124,124,124,124,124,]),'assert_statement':([76,118,192,193,204,209,210,],[125,125,125,125,125,125,125,]),'print_statement':([76,118,192,193,204,209,210,],[126,126,126,126,126,126,126,]),'read_statement':([76,118,192,193,204,209,210,],[127,127,127,127,127,127,127,]),'expression_opt':([76,118,134,170,174,186,192,193,194,201,204,205,209,210,],[128,128,172,185,189,195,128,128,200,206,128,208,128,128,]),'argument_expression_opt':([95,],[156,]),'argument_expression':([95,175,],[158,190,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','uc_parser.py',161),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','uc_parser.py',168),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','uc_parser.py',169),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_1','uc_parser.py',179),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_2','uc_parser.py',186),
  ('function_definition -> type_specifier declarator declaration_list compound_statement','function_definition',4,'p_function_definition_1','uc_parser.py',193),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition_2','uc_parser.py',207),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','uc_parser.py',224),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','uc_parser.py',225),
  ('declaration -> type_specifier init_declarator_list_opt SEMI','declaration',3,'p_declaration','uc_parser.py',235),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','uc_parser.py',242),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','uc_parser.py',243),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','uc_parser.py',244),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','uc_parser.py',245),
  ('declarator -> direct_declarator','declarator',1,'p_declarator_1','uc_parser.py',252),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator_2','uc_parser.py',259),
  ('pointer -> TIMES','pointer',1,'p_pointer','uc_parser.py',266),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','uc_parser.py',267),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','uc_parser.py',277),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','uc_parser.py',288),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator_3','uc_parser.py',295),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',308),
  ('direct_declarator -> direct_declarator LPAREN identifier_list RPAREN','direct_declarator',4,'p_direct_declarator_4','uc_parser.py',309),
  ('identifier -> ID','identifier',1,'p_identifier','uc_parser.py',322),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','uc_parser.py',329),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','uc_parser.py',330),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','uc_parser.py',344),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',351),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','uc_parser.py',352),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','uc_parser.py',360),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',361),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',362),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',363),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',364),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',365),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',366),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',367),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',368),
  ('binary_expression -> binary_expression GE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',369),
  ('binary_expression -> binary_expression EQ binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',370),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',371),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',372),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','uc_parser.py',373),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','uc_parser.py',388),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','uc_parser.py',395),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','uc_parser.py',406),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',413),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',414),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','uc_parser.py',415),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','uc_parser.py',426),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','uc_parser.py',433),
  ('postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN','postfix_expression',4,'p_postfix_expression_3','uc_parser.py',444),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',455),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_4','uc_parser.py',456),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','uc_parser.py',467),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','uc_parser.py',468),
  ('argument_expression_opt -> empty','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',478),
  ('argument_expression_opt -> argument_expression','argument_expression_opt',1,'p_argument_expression_opt','uc_parser.py',479),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression','uc_parser.py',489),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','uc_parser.py',490),
  ('primary_expression -> STRING_LITERAL','primary_expression',1,'p_primary_expression','uc_parser.py',491),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','uc_parser.py',492),
  ('constant -> INT_CONST','constant',1,'p_constant','uc_parser.py',502),
  ('constant -> CHAR_CONST','constant',1,'p_constant','uc_parser.py',503),
  ('constant -> FLOAT_CONST','constant',1,'p_constant','uc_parser.py',504),
  ('expression -> assignment_expression','expression',1,'p_expression','uc_parser.py',511),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','uc_parser.py',512),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','uc_parser.py',522),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','uc_parser.py',523),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','uc_parser.py',533),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','uc_parser.py',534),
  ('assignment_operator -> EQUALS','assignment_operator',1,'p_assignment_operator','uc_parser.py',549),
  ('assignment_operator -> TIMESEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',550),
  ('assignment_operator -> DIVIDEEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',551),
  ('assignment_operator -> MODEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',552),
  ('assignment_operator -> PLUSEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',553),
  ('assignment_operator -> MINUSEQUAL','assignment_operator',1,'p_assignment_operator','uc_parser.py',554),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','uc_parser.py',561),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','uc_parser.py',562),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','uc_parser.py',563),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','uc_parser.py',564),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','uc_parser.py',565),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','uc_parser.py',572),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','uc_parser.py',573),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','uc_parser.py',583),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','uc_parser.py',590),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','uc_parser.py',591),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',601),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','uc_parser.py',602),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','uc_parser.py',612),
  ('init_declarator -> declarator EQUALS initializer','init_declarator',3,'p_init_declarator','uc_parser.py',613),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','uc_parser.py',623),
  ('initializer -> LBRACE initializer_list_opt RBRACE','initializer',3,'p_initializer','uc_parser.py',624),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','uc_parser.py',625),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','uc_parser.py',635),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','uc_parser.py',636),
  ('initializer_list_opt -> empty','initializer_list_opt',1,'p_initializer_list_opt','uc_parser.py',646),
  ('initializer_list_opt -> initializer_list','initializer_list_opt',1,'p_initializer_list_opt','uc_parser.py',647),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement','uc_parser.py',654),
  ('statement -> expression_statement','statement',1,'p_statement','uc_parser.py',661),
  ('statement -> compound_statement','statement',1,'p_statement','uc_parser.py',662),
  ('statement -> selection_statement','statement',1,'p_statement','uc_parser.py',663),
  ('statement -> iteration_statement','statement',1,'p_statement','uc_parser.py',664),
  ('statement -> jump_statement','statement',1,'p_statement','uc_parser.py',665),
  ('statement -> assert_statement','statement',1,'p_statement','uc_parser.py',666),
  ('statement -> print_statement','statement',1,'p_statement','uc_parser.py',667),
  ('statement -> read_statement','statement',1,'p_statement','uc_parser.py',668),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','uc_parser.py',675),
  ('statement_list -> statement','statement_list',1,'p_statement_list','uc_parser.py',676),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','uc_parser.py',686),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','uc_parser.py',693),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','uc_parser.py',694),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','uc_parser.py',704),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement','uc_parser.py',705),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement','uc_parser.py',706),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement','uc_parser.py',716),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement','uc_parser.py',717),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','uc_parser.py',727),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','uc_parser.py',734),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','uc_parser.py',741),
  ('empty -> <empty>','empty',0,'p_empty','uc_parser.py',755),
]
